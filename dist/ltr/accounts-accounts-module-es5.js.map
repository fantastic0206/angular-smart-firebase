{"version":3,"sources":["webpack:///src/app/accounts/teachers.service.ts","webpack:///src/app/accounts/accounts.component.ts","webpack:///src/app/accounts/accounts.component.html","webpack:///src/app/accounts/dialogs/delete/delete.component.ts","webpack:///src/app/accounts/dialogs/delete/delete.component.html","webpack:///src/app/accounts/teachers.model.ts","webpack:///src/app/accounts/dialogs/form-dialog/form-dialog.component.ts","webpack:///src/app/accounts/dialogs/form-dialog/form-dialog.component.html","webpack:///src/app/accounts/accounts-routing.module.ts","webpack:///src/app/accounts/accounts.module.ts"],"names":["TeachersService","httpClient","API_URL","isTblLoading","dataChange","dialogData","get","subscribe","data","next","error","console","log","name","message","teachers","id","value","$event","stopPropagation","selection","AccountsComponent","fb","dialog","teachersService","snackBar","displayedColumns","contextMenuPosition","x","y","proForm","group","from","required","pattern","to","loadData","chart2","dialogRef","open","action","afterClosed","result","exampleDatabase","unshift","getDialogData","refreshTable","showNotification","row","foundIndex","findIndex","splice","paginator","_changePageSize","pageSize","numSelected","selected","length","numRows","dataSource","renderedData","isAllSelected","clear","forEach","select","totalSelect","item","index","d","ExampleDataSource","sort","amountData","filter","nativeElement","colorName","text","placementFrom","placementAlign","duration","verticalPosition","horizontalPosition","panelClass","event","preventDefault","clientX","clientY","contextMenu","menuData","menu","focusFirstItem","openMenu","barChartOptions","series","chart","height","type","toolbar","show","foreColor","plotOptions","bar","dataLabels","position","enabled","formatter","val","offsetY","style","fontSize","colors","xaxis","categories","labels","axisBorder","axisTicks","crosshairs","fill","gradient","colorFrom","colorTo","stops","opacityFrom","opacityTo","tooltip","shade","shadeIntensity","gradientToColors","undefined","inverseColors","yaxis","removeSelectedRows","addNew","onSubmit","selector","templateUrl","styleUrls","_sort","filterChange","filteredData","pageIndex","displayDataChanges","sortChange","page","getAllTeacherss","pipe","slice","searchStr","date","accountName","tradingClient","amount","status","toLowerCase","indexOf","sortedData","sortData","startIndex","active","direction","a","b","propertyA","propertyB","sno","valueA","isNaN","valueB","DeleteDialogComponent","close","deleteTeachers","confirmDelete","onNoClick","Teachers","getRandomID","Date","S4","Math","random","toString","substring","FormDialogComponent","formControl","dialogTitle","flagName","createContactForm","hasError","addTeachers","getRawValue","confirmAdd","routes","path","component","AccountsRoutingModule","forChild","imports","exports","AccountsModule","forRoot","echarts","declarations","providers"],"mappings":"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","file":"accounts-accounts-module-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { Teachers } from './teachers.model';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\n@Injectable()\r\nexport class TeachersService {\r\n  private readonly API_URL = 'assets/data/accounts.json';\r\n  isTblLoading = true;\r\n  dataChange: BehaviorSubject<Teachers[]> = new BehaviorSubject<Teachers[]>([]);\r\n  // Temporarily stores data from dialogs\r\n  dialogData: any;\r\n  constructor(private httpClient: HttpClient) {}\r\n  get data(): Teachers[] {\r\n    return this.dataChange.value;\r\n  }\r\n  getDialogData() {\r\n    return this.dialogData;\r\n  }\r\n  /** CRUD METHODS */\r\n  getAllTeacherss(): void {\r\n    this.httpClient.get<Teachers[]>(this.API_URL).subscribe(\r\n      (data) => {\r\n        this.isTblLoading = false;\r\n        this.dataChange.next(data);\r\n      },\r\n      (error: HttpErrorResponse) => {\r\n        this.isTblLoading = false;\r\n        console.log(error.name + ' ' + error.message);\r\n      }\r\n    );\r\n  }\r\n  addTeachers(teachers: Teachers): void {\r\n    this.dialogData = teachers;\r\n\r\n    /*  this.httpClient.post(this.API_URL, teachers).subscribe(data => {\r\n      this.dialogData = teachers;\r\n      },\r\n      (err: HttpErrorResponse) => {\r\n     // error code here\r\n    });*/\r\n  }\r\n  updateTeachers(teachers: Teachers): void {\r\n    this.dialogData = teachers;\r\n\r\n    /* this.httpClient.put(this.API_URL + teachers.id, teachers).subscribe(data => {\r\n      this.dialogData = teachers;\r\n    },\r\n    (err: HttpErrorResponse) => {\r\n      // error code here\r\n    }\r\n  );*/\r\n  }\r\n  deleteTeachers(id: number): void {\r\n    console.log(id);\r\n\r\n    /*  this.httpClient.delete(this.API_URL + id).subscribe(data => {\r\n      console.log(id);\r\n      },\r\n      (err: HttpErrorResponse) => {\r\n         // error code here\r\n      }\r\n    );*/\r\n  }\r\n}\r\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { TeachersService } from './teachers.service';\nimport { HttpClient } from '@angular/common/http';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { Teachers } from './teachers.model';\nimport { DataSource } from '@angular/cdk/collections';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { BehaviorSubject, fromEvent, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { FormDialogComponent } from './dialogs/form-dialog/form-dialog.component';\nimport { DeleteDialogComponent } from './dialogs/delete/delete.component';\nimport { MatMenuTrigger } from '@angular/material/menu';\nimport { SelectionModel } from '@angular/cdk/collections';\n\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  ChartComponent,\n  ApexAxisChartSeries,\n  ApexChart,\n  ApexXAxis,\n  ApexDataLabels,\n  ApexTooltip,\n  ApexYAxis,\n  ApexPlotOptions,\n  ApexStroke,\n  ApexLegend,\n  ApexFill,\n} from 'ng-apexcharts';\nexport type areaChartOptions = {\n  series: ApexAxisChartSeries;\n  chart: ApexChart;\n  xaxis: ApexXAxis;\n  yaxis: ApexYAxis;\n  stroke: ApexStroke;\n  tooltip: ApexTooltip;\n  dataLabels: ApexDataLabels;\n  legend: ApexLegend;\n  colors: string[];\n};\n\nexport type barChartOptions = {\n  series: ApexAxisChartSeries;\n  chart: ApexChart;\n  dataLabels: ApexDataLabels;\n  plotOptions: ApexPlotOptions;\n  yaxis: ApexYAxis;\n  xaxis: ApexXAxis;\n  fill: ApexFill;\n  colors: string[];\n};\n\n@Component({\n  selector: 'app-accounts',\n  templateUrl: './accounts.component.html',\n  styleUrls: ['./accounts.component.sass']\n})\nexport class AccountsComponent implements OnInit {\n  displayedColumns = [\n    'select',\n    'sno',\n    'date',\n    'accountName',\n    'tradingClient',\n    'amount',\n    'status',\n    'actions',\n  ];\n  exampleDatabase: TeachersService | null;\n  dataSource: ExampleDataSource | null;\n  amountData: any;\n  selection = new SelectionModel<Teachers>(true, []);\n  id: number;\n  teachers: Teachers | null;\n\n  @ViewChild('chart') chart: ChartComponent;\n  public areaChartOptions: Partial<areaChartOptions>;\n  public barChartOptions: Partial<barChartOptions>;\n\n  proForm: FormGroup;\n\n  constructor(\n    private fb: FormBuilder,\n    public httpClient: HttpClient,\n    public dialog: MatDialog,\n    public teachersService: TeachersService,\n    private snackBar: MatSnackBar\n  ) {\n    this.proForm = this.fb.group({\n      from: ['', [Validators.required, Validators.pattern('[a-zA-Z]+')]],\n      to: [''],\n    });\n  }\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n  @ViewChild('filter', { static: true }) filter: ElementRef;\n  @ViewChild(MatMenuTrigger)\n  contextMenu: MatMenuTrigger;\n  contextMenuPosition = { x: '0px', y: '0px' };\n\n  onSubmit() {\n    console.log('Form Value', this.proForm.value);\n  }\n\n  ngOnInit(): void {\n    this.loadData();\n    this.chart2();\n  }\n  addNew() {\n    const dialogRef = this.dialog.open(FormDialogComponent, {\n      data: {\n        teachers: this.teachers,\n        action: 'add',\n      },\n    });\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result === 1) {\n        // After dialog is closed we're doing frontend updates\n        // For add we're just pushing a new row inside DataServicex\n        this.exampleDatabase.dataChange.value.unshift(\n          this.teachersService.getDialogData()\n        );\n        this.refreshTable();\n        this.showNotification(\n          'snackbar-success',\n          'Add Record Successfully...!!!',\n          'bottom',\n          'center'\n        );\n      }\n    });\n  }\n  editCall(row) {\n    this.id = row.id;\n    const dialogRef = this.dialog.open(FormDialogComponent, {\n      data: {\n        teachers: row,\n        action: 'edit',\n      },\n    });\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result === 1) {\n        // When using an edit things are little different, firstly we find record inside DataService by id\n        const foundIndex = this.exampleDatabase.dataChange.value.findIndex(\n          (x) => x.id === this.id\n        );\n        // Then you update that record using data from dialogData (values you enetered)\n        this.exampleDatabase.dataChange.value[\n          foundIndex\n        ] = this.teachersService.getDialogData();\n        // And lastly refresh table\n        this.refreshTable();\n        this.showNotification(\n          'black',\n          'Edit Record Successfully...!!!',\n          'bottom',\n          'center'\n        );\n      }\n    });\n  }\n  deleteItem(row) {\n    this.id = row.id;\n    const dialogRef = this.dialog.open(DeleteDialogComponent, {\n      data: row,\n    });\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result === 1) {\n        const foundIndex = this.exampleDatabase.dataChange.value.findIndex(\n          (x) => x.id === this.id\n        );\n        // for delete we use splice in order to remove single object from DataService\n        this.exampleDatabase.dataChange.value.splice(foundIndex, 1);\n        this.refreshTable();\n        this.showNotification(\n          'snackbar-danger',\n          'Delete Record Successfully...!!!',\n          'bottom',\n          'center'\n        );\n      }\n    });\n  }\n  private refreshTable() {\n    this.paginator._changePageSize(this.paginator.pageSize);\n  }\n  /** Whether the number of selected elements matches the total number of rows. */\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.renderedData.length;\n    return numSelected === numRows;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  masterToggle() {\n    this.isAllSelected()\n      ? this.selection.clear()\n      : this.dataSource.renderedData.forEach((row) =>\n          this.selection.select(row)\n        );\n  }\n  removeSelectedRows() {\n    const totalSelect = this.selection.selected.length;\n    this.selection.selected.forEach((item) => {\n      const index: number = this.dataSource.renderedData.findIndex(\n        (d) => d === item\n      );\n      // console.log(this.dataSource.renderedData.findIndex((d) => d === item));\n      this.exampleDatabase.dataChange.value.splice(index, 1);\n      this.refreshTable();\n      this.selection = new SelectionModel<Teachers>(true, []);\n    });\n    this.showNotification(\n      'snackbar-danger',\n      totalSelect + ' Record Delete Successfully...!!!',\n      'bottom',\n      'center'\n    );\n  }\n  public loadData() {\n    this.exampleDatabase = new TeachersService(this.httpClient);\n\n    this.dataSource = new ExampleDataSource(\n      this.exampleDatabase,\n      this.paginator,\n      this.sort,\n      this.amountData\n    );\n    console.log(\"dataSource\", this.dataSource);\n\n    fromEvent(this.filter.nativeElement, 'keyup').subscribe(() => {\n      if (!this.dataSource) {\n        return;\n      }\n      this.dataSource.filter = this.filter.nativeElement.value;\n    });\n  }\n  showNotification(colorName, text, placementFrom, placementAlign) {\n    this.snackBar.open(text, '', {\n      duration: 2000,\n      verticalPosition: placementFrom,\n      horizontalPosition: placementAlign,\n      panelClass: colorName,\n    });\n  }\n  // context menu\n  onContextMenu(event: MouseEvent, item: Teachers) {\n    event.preventDefault();\n    this.contextMenuPosition.x = event.clientX + 'px';\n    this.contextMenuPosition.y = event.clientY + 'px';\n    this.contextMenu.menuData = { item: item };\n    this.contextMenu.menu.focusFirstItem('mouse');\n    this.contextMenu.openMenu();\n  }\n\n  private chart2() {\n    this.barChartOptions = {\n      series: [\n        {\n          name: 'accounts',\n          data: [5000, 6000, 6000, 7000],\n        },\n      ],\n      chart: {\n        height: 320,\n        type: 'bar',\n        toolbar: {\n          show: false,\n        },\n        foreColor: '#9aa0ac',\n      },\n      plotOptions: {\n        bar: {\n          dataLabels: {\n            position: 'top', // top, center, bottom\n          },\n        },\n      },\n      dataLabels: {\n        enabled: false,\n        formatter: function (val) {\n          return val + '%';\n        },\n        offsetY: -20,\n        style: {\n          fontSize: '12px',\n          colors: ['#9aa0ac'],\n        },\n      },\n\n      xaxis: {\n        categories: [\n          'Gowtham',\n          'Divya',\n          'Besedin',\n          'Musthafa'\n        ],\n        position: 'bottom',\n        labels: {\n          offsetY: 0,\n        },\n        axisBorder: {\n          show: false,\n        },\n        axisTicks: {\n          show: false,\n        },\n        crosshairs: {\n          fill: {\n            type: 'gradient',\n            gradient: {\n              colorFrom: '#D8E3F0',\n              colorTo: '#BED1E6',\n              stops: [0, 100],\n              opacityFrom: 0.4,\n              opacityTo: 0.5,\n            },\n          },\n        },\n        tooltip: {\n          enabled: true,\n          offsetY: -35,\n        },\n      },\n      fill: {\n        type: 'gradient',\n        colors: ['#4F86F8', '#4F86F8'],\n        gradient: {\n          shade: 'light',\n          type: 'horizontal',\n          shadeIntensity: 0.25,\n          gradientToColors: undefined,\n          inverseColors: true,\n          opacityFrom: 1,\n          opacityTo: 1,\n          stops: [50, 0, 100, 100],\n        },\n      },\n      yaxis: {\n        axisBorder: {\n          show: false,\n        },\n        axisTicks: {\n          show: false,\n        },\n        labels: {\n          show: true,\n          formatter: function (val) {\n            return val + '';\n          },\n        },\n      },\n    };\n  }\n}\nexport class ExampleDataSource extends DataSource<Teachers> {\n  filterChange = new BehaviorSubject('');\n  get filter(): string {\n    return this.filterChange.value;\n  }\n  set filter(filter: string) {\n    this.filterChange.next(filter);\n  }\n  filteredData: Teachers[] = [];\n  renderedData: Teachers[] = [];\n  constructor(\n    public exampleDatabase: TeachersService,\n    public paginator: MatPaginator,\n    public _sort: MatSort,\n    public amountData: any\n  ) {\n    super();\n    // Reset to the first page when the user changes the filter.\n    this.filterChange.subscribe(() => (this.paginator.pageIndex = 0));\n  }\n  /** Connect function called by the table to retrieve one stream containing the data to render. */\n  connect(): Observable<Teachers[]> {\n    // Listen for any changes in the base data, sorting, filtering, or pagination\n    const displayDataChanges = [\n      this.exampleDatabase.dataChange,\n      this._sort.sortChange,\n      this.filterChange,\n      this.paginator.page,\n    ];\n    this.exampleDatabase.getAllTeacherss();\n    return merge(...displayDataChanges).pipe(\n      map(() => {\n        // Filter data\n        this.filteredData = this.exampleDatabase.data\n          .slice()\n          .filter((teachers: Teachers) => {\n            const searchStr = (\n              teachers.date +\n              teachers.accountName +\n              teachers.tradingClient +\n              teachers.amount +\n              teachers.status\n            ).toLowerCase();\n            return searchStr.indexOf(this.filter.toLowerCase()) !== -1;\n          });\n        // Sort filtered data\n        const sortedData = this.sortData(this.filteredData.slice());\n        // Grab the page's slice of the filtered sorted data.\n        const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n        this.renderedData = sortedData.splice(\n          startIndex,\n          this.paginator.pageSize\n        );\n        return this.renderedData;\n      })\n    );\n  }\n  disconnect() {}\n  /** Returns a sorted copy of the database data. */\n  sortData(data: Teachers[]): Teachers[] {\n    if (!this._sort.active || this._sort.direction === '') {\n      return data;\n    }\n    return data.sort((a, b) => {\n      let propertyA: number | string = '';\n      let propertyB: number | string = '';\n      switch (this._sort.active) {\n        case 'id':\n          [propertyA, propertyB] = [a.id, b.id];\n          break;\n        case 'sno':\n          [propertyA, propertyB] = [a.sno, b.sno];\n          break;\n        case 'date':\n          [propertyA, propertyB] = [a.date, b.date];\n          break;\n        case 'accountName':\n          [propertyA, propertyB] = [a.accountName, b.accountName];\n          break;\n        case 'tradingClient':\n          [propertyA, propertyB] = [a.tradingClient, b.tradingClient];\n          break;\n        case 'amount':\n          [propertyA, propertyB] = [a.amount, b.amount];\n          break;\n      }\n      const valueA = isNaN(+propertyA) ? propertyA : +propertyA;\n      const valueB = isNaN(+propertyB) ? propertyB : +propertyB;\n      return (\n        (valueA < valueB ? -1 : 1) * (this._sort.direction === 'asc' ? 1 : -1)\n      );\n    });\n  }\n}\n","<section class=\"content\" style=\"margin-top: 10px\">\n  <div class=\"container-fluid\">\n    <div class=\"block-header\">\n      <div class=\"row\">\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n          <ul class=\"breadcrumb breadcrumb-style \">\n            <li class=\"breadcrumb-item\">\n              <h4 class=\"page-title\">Accounts</h4>\n            </li>\n            <li class=\"breadcrumb-item bcrumb-1\">\n              <a routerLink=\"/dashboard\">\n                <i class=\"fas fa-home\"></i></a>\n            </li>\n            <a class=\"active\" style=\"color: #444444; padding: 3px 0;\">Accounts</a>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n      <div class=\"card\">\n        <div class=\"body\">\n          <div class=\"table-responsive\">\n            <div class=\"materialTableHeader\">\n              <div class=\"row\">\n                <div class=\"col-8\">\n                  <ul class=\"header-buttons-left ml-0\">\n                    <!-- <li class=\"dropdown\">\n                      <h2>\n                        <strong>Teachers</strong></h2>\n                    </li> -->\n                    <li class=\"dropdown m-l-20\">\n                      <label for=\"search-input\"><i class=\"material-icons search-icon\">search</i></label>\n                      <input placeholder=\"Search\" type=\"text\" #filter class=\"browser-default search-field\"\n                        aria-label=\"Search box\">\n                    </li>\n                    <li>\n                      <div class=\"icon-button-demo m-l-10\" [hidden]=!selection.hasValue()>\n                        <button mat-mini-fab color=\"warn\" (click)=\"removeSelectedRows()\">\n                          <mat-icon class=\"col-white\">delete\n                          </mat-icon>\n                        </button>\n                      </div>\n                    </li>\n                  </ul>\n                </div>\n                <div class=\"col-4\">\n                  <ul class=\"header-buttons\">\n                    <li>\n                      <div class=\"icon-button-demo\">\n                        <button mat-raised-button color=\"primary\" (click)=\"addNew()\">\n                          <mat-icon class=\"col-white\" style=\"font-size: 16px; padding: 3px;\">add</mat-icon>Add\n                        </button>\n                      </div>\n                    </li>\n                    <!-- <li>\n                      <div class=\"icon-button-demo\">\n                        <button mat-mini-fab color=\"primary\">\n                          <mat-icon class=\"col-white\">refresh\n                          </mat-icon>\n                        </button>\n                      </div>\n                    </li> -->\n                  </ul>\n                </div>\n              </div>\n            </div>\n            <mat-table #table [dataSource]=\"dataSource\" matSort class=\"mat-cell\">\n              <!-- Checkbox Column -->\n              <ng-container matColumnDef=\"select\">\n                <mat-header-cell *matHeaderCellDef [ngClass]=\"'tbl-col-width-per-6'\">\n                  <mat-checkbox (change)=\"$event ? masterToggle() : null\"\n                    [checked]=\"selection.hasValue() && isAllSelected()\"\n                    [indeterminate]=\"selection.hasValue() && !isAllSelected()\" [ngClass]=\"'tbl-checkbox'\">\n                  </mat-checkbox>\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let row\" [ngClass]=\"'tbl-col-width-per-6'\">\n                  <mat-checkbox (click)=\"$event.stopPropagation()\"\n                    (change)=\"$event ? selection.toggle(row) : null\" [checked]=\"selection.isSelected(row)\"\n                    [ngClass]=\"'tbl-checkbox'\">\n                  </mat-checkbox>\n                </mat-cell>\n              </ng-container>\n              <!-- ID Column -->\n              <ng-container matColumnDef=\"id\">\n                <mat-header-cell *matHeaderCellDef mat-sort-header>Id\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let row\">{{row.id}}</mat-cell>\n              </ng-container>\n              <ng-container matColumnDef=\"sno\">\n                <mat-header-cell mat-header-cell *matHeaderCellDef> S.NO\n                </mat-header-cell>\n                <mat-cell mat-cell *matCellDef=\"let row\" (contextmenu)=\"onContextMenu($event, row)\"> {{row.sno}}\n                </mat-cell>\n              </ng-container>\n              <ng-container matColumnDef=\"date\">\n                <mat-header-cell *matHeaderCellDef mat-sort-header>Date\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let row\" (contextmenu)=\"onContextMenu($event, row)\"> {{row.date}}\n                </mat-cell>\n              </ng-container>\n              <ng-container matColumnDef=\"accountName\">\n                <mat-header-cell *matHeaderCellDef mat-sort-header>Account Name\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let row\" (contextmenu)=\"onContextMenu($event, row)\">\n                  {{row.accountName}}</mat-cell>\n              </ng-container>\n              <ng-container matColumnDef=\"tradingClient\">\n                <mat-header-cell *matHeaderCellDef mat-sort-header>Trading Client\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let row\" (contextmenu)=\"onContextMenu($event, row)\"> {{row.tradingClient}}\n                </mat-cell>\n              </ng-container>\n              <ng-container matColumnDef=\"amount\">\n                <mat-header-cell *matHeaderCellDef mat-sort-header>Amount\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let row\" (contextmenu)=\"onContextMenu($event, row)\"> {{row.amount}}\n                </mat-cell>\n              </ng-container>\n              <ng-container matColumnDef=\"status\">\n                <mat-header-cell *matHeaderCellDef mat-sort-header>Status\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let row\" (contextmenu)=\"onContextMenu($event, row)\"> {{row.status}}\n                </mat-cell>\n              </ng-container>\n              <!-- actions -->\n              <ng-container matColumnDef=\"actions\">\n                <mat-header-cell class=\"pr-0\" *matHeaderCellDef>Actions\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let row; let i=index;\" class=\"pr-0\">\n                  <button mat-icon-button color=\"accent\" class=\"btn-tbl-edit\" (click)=\"$event.stopPropagation()\"\n                    (click)=\"editCall(row)\">\n                    <mat-icon aria-label=\"Edit\" class=\"col-white\">edit</mat-icon>\n                  </button>\n                  <button mat-icon-button color=\"accent\" class=\"btn-tbl-delete\" (click)=\"$event.stopPropagation()\"\n                    (click)=\"deleteItem(row)\">\n                    <mat-icon aria-label=\"Delete\" class=\"col-white\">delete</mat-icon>\n                  </button>\n                </mat-cell>\n              </ng-container>\n              <mat-header-row *matHeaderRowDef=\"displayedColumns\">\n              </mat-header-row>\n              <!-- <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row> -->\n              <mat-row *matRowDef=\"let row; columns: displayedColumns;\" (click)=\"editCall(row)\"\n                [style.cursor]=\"'pointer'\" matRipple>\n              </mat-row>\n            </mat-table>\n            <!-- Loading spinner -->\n            <div *ngIf=\"exampleDatabase.isTblLoading\" class=\"tbl-spinner\">\n              <mat-progress-spinner color=\"primary\" [diameter]=\"40\" mode=\"indeterminate\">\n              </mat-progress-spinner>\n            </div>\n            <!-- context menu start -->\n            <div style=\"visibility: hidden; position: fixed\" [style.left]=\"contextMenuPosition.x\"\n              [style.top]=\"contextMenuPosition.y\" [matMenuTriggerFor]=\"contextMenu\">\n            </div>\n            <mat-menu #contextMenu=\"matMenu\">\n              <ng-template matMenuContent let-item=\"item\">\n                <button mat-menu-item (click)=\"addNew()\">\n                  <mat-icon>add_box</mat-icon>\n                  <span>Add Record</span>\n                </button>\n                <button mat-menu-item (click)=\"editCall(item)\">\n                  <mat-icon>create</mat-icon>\n                  <span>Edit Record</span>\n                </button>\n                <button mat-menu-item (click)=\"deleteItem(item)\">\n                  <mat-icon>delete</mat-icon>\n                  <span>Delete Record</span>\n                </button>\n                <button mat-menu-item (click)=\"refresh()\">\n                  <mat-icon>refresh</mat-icon>\n                  <span>Refresh Record</span>\n                </button>\n                <button mat-menu-item disabled>\n                  <mat-icon>no_encryption</mat-icon>\n                  <span>Disable</span>\n                </button>\n                <button mat-menu-item [matMenuTriggerFor]=\"nestedmenu\">\n                  <mat-icon>list_alt</mat-icon>\n                  <span> Nested Menu</span>\n                </button>\n              </ng-template>\n            </mat-menu>\n            <mat-menu #nestedmenu=\"matMenu\">\n              <button mat-menu-item>\n                <mat-icon>mail_outline</mat-icon>\n                <span>Item 1</span>\n              </button>\n              <button mat-menu-item>\n                <mat-icon>call</mat-icon>\n                <span>Item 2</span>\n              </button>\n              <button mat-menu-item>\n                <mat-icon>chat</mat-icon>\n                <span>Item 3</span>\n              </button>\n            </mat-menu>\n            <!-- context menu end -->\n            <div *ngIf=\"!exampleDatabase.isTblLoading\" class=\"no-results\"\n              [style.display]=\"dataSource.renderedData.length == 0 ? '' : 'none'\">\n              No results\n            </div>\n            <div class=\"materialTableFooter\" style=\"position: absolute; padding-top: 15px; right: 36%;\">\n              1750000\n            </div>\n            <mat-paginator #paginator [length]=\"dataSource.filteredData.length\" [pageIndex]=\"0\"\n              [pageSize]=\"10\" [pageSizeOptions]=\"[5, 10, 25, 100]\">\n            </mat-paginator>\n          </div>\n        </div>\n      </div>\n    </div>\n\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-4\">\n      <div class=\"card\">\n        <form class=\"m-4\" [formGroup]=\"proForm\" (ngSubmit)=\"onSubmit()\">\n          <div class=\"row\">\n            <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\n              <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                <mat-label>From</mat-label>\n                <input matInput [matDatepicker]=\"picker1\">\n                <mat-datepicker-toggle matSuffix [for]=\"picker1\"></mat-datepicker-toggle>\n                <mat-datepicker #picker1></mat-datepicker>\n              </mat-form-field>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\n              <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                <mat-label>To</mat-label>\n                <input matInput [matDatepicker]=\"picker2\">\n                <mat-datepicker-toggle matSuffix [for]=\"picker2\"></mat-datepicker-toggle>\n                <mat-datepicker #picker2></mat-datepicker>\n              </mat-form-field>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\n              <button class=\"mr-auto\" mat-raised-button color=\"primary\">Submit</button>\n              <!-- <button type=\"button\" mat-button>Cancel</button> -->\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n    <div class=\"col-md-8\">\n      <div class=\"card\">\n        <div class=\"header\">\n          <h2>Accounts</h2>\n          <!-- <button mat-button [matMenuTriggerFor]=\"menu\" class=\"header-dropdown\">\n            <mat-icon>more_vert</mat-icon>\n          </button>\n          <mat-menu #menu=\"matMenu\">\n            <button mat-menu-item>Action</button>\n            <button mat-menu-item>Another action</button>\n            <button mat-menu-item>Something else here</button>\n          </mat-menu> -->\n        </div>\n        <div class=\"body\">\n          <apx-chart [series]=\"barChartOptions.series\" [chart]=\"barChartOptions.chart\"\n            [dataLabels]=\"barChartOptions.dataLabels\" [plotOptions]=\"barChartOptions.plotOptions\"\n            [yaxis]=\"barChartOptions.yaxis\" [xaxis]=\"barChartOptions.xaxis\" [fill]=\"barChartOptions.fill\"></apx-chart>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { TeachersService } from '../../teachers.service';\n\n@Component({\n  selector: 'app-delete',\n  templateUrl: './delete.component.html',\n  styleUrls: ['./delete.component.sass']\n})\nexport class DeleteDialogComponent implements OnInit {\n\n  constructor(\n    public dialogRef: MatDialogRef<DeleteDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    public teachersService: TeachersService\n  ) { }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  confirmDelete(): void {\n    this.teachersService.deleteTeachers(this.data.id);\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"container\">\n  <h3 mat-dialog-title>Are you sure?</h3>\n  <div mat-dialog-content>\n    <ul class=\"clearfix\">\n      <li>\n        <p><span class=\"font-weight-bold\"> Account: </span>{{data.accountName}}</p>\n      </li>\n      <li>\n        <p><span class=\"font-weight-bold\"> Status: </span>{{ data.status }}</p>\n      </li>\n    </ul>\n  </div>\n  <div mat-dialog-actions class=\"mb-1\">\n    <button mat-flat-button color=\"warn\" [mat-dialog-close]=\"1\" (click)=\"confirmDelete()\">\n      Delete\n    </button>\n    <button mat-flat-button (click)=\"onNoClick()\" tabindex=\"-1\">Cancel</button>\n  </div>\n</div>\n","import { formatDate } from '@angular/common';\r\nexport class Teachers {\r\n  id: number;\r\n  sno: string;\r\n  date: string;\r\n  accountName: string;\r\n  tradingClient: string;\r\n  amount: string;\r\n  status: string;\r\n  constructor(teachers) {\r\n    {\r\n      this.id = teachers.id || this.getRandomID();\r\n      this.sno = teachers.sno || \"\";\r\n      this.date = teachers.date || formatDate(new Date(), 'yyyy-MM-dd', 'en');\r\n      this.accountName = teachers.accountName || '';\r\n      this.tradingClient = teachers.tradingClient || '';\r\n      this.amount = teachers.amount || '';\r\n      this.status = teachers.status || '';\r\n    }\r\n  }\r\n  public getRandomID(): string {\r\n    const S4 = () => {\r\n      return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n    };\r\n    return S4() + S4();\r\n  }\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { TeachersService } from '../../teachers.service';\nimport {\n  FormControl,\n  Validators,\n  FormGroup,\n  FormBuilder,\n} from '@angular/forms';\nimport { Teachers } from '../../teachers.model';\nimport { formatDate } from '@angular/common';\n\n@Component({\n  selector: 'app-form-dialog',\n  templateUrl: './form-dialog.component.html',\n  styleUrls: ['./form-dialog.component.sass']\n})\nexport class FormDialogComponent implements OnInit {\n  action: string;\n  dialogTitle: string;\n  proForm: FormGroup;\n  teachers: Teachers;\n\n  constructor(\n    public dialogRef: MatDialogRef<FormDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    public teachersService: TeachersService,\n    private fb: FormBuilder\n  ) {\n    // Set the defaults\n    this.action = data.action;\n    if (this.action === 'edit') {\n      this.dialogTitle = data.teachers.flagName;\n      this.teachers = data.teachers;\n    } else {\n      console.log(\"teachersService\", teachersService.getAllTeacherss());\n      this.dialogTitle = 'New Account';\n      this.teachers = new Teachers({});\n    }\n    this.proForm = this.createContactForm();\n  }\n  formControl = new FormControl('', [\n    Validators.required,\n    // Validators.email,\n  ]);\n  getErrorMessage() {\n    return this.formControl.hasError('required')\n      ? 'Required field'\n      : this.formControl.hasError('email')\n      ? 'Not a valid email'\n      : '';\n  }\n  createContactForm(): FormGroup {\n    console.log(\"add=========\", [this.teachers]);\n    return this.fb.group({\n      id: [this.teachers.id],\n      sno: [this.teachers.sno],\n      // email: [\n      //   this.teachers.email,\n      //   [Validators.required, Validators.email, Validators.minLength(5)],\n      // ],\n      date: [\n        formatDate(this.teachers.date, 'yyyy-MM-dd', 'en'),\n        [Validators.required],\n      ],\n      accountName: [this.teachers.accountName],\n      tradingClient: [this.teachers.tradingClient],\n      amount: [this.teachers.amount],\n      status: [this.teachers.status],\n    });\n  }\n  submit() {\n    // emppty stuff\n  }\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n  public confirmAdd(): void {\n    this.teachersService.addTeachers(this.proForm.getRawValue());\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"addContainer\">\n  <div class=\"modalHeader\">\n    <div class=\"editRowModal\">\n      <div class=\"modalHeader clearfix\">\n        <!-- <img [src]='teachers.img' alt=\"avatar\"> -->\n        <div class=\"modal-about\">\n          <div class=\"font-weight-bold p-t-5 font-17\">\n            {{dialogTitle}}</div>\n        </div>\n      </div>\n    </div>\n    <button mat-icon-button (click)=\"dialogRef.close()\" aria-label=\"Close dialog\">\n      <mat-icon>close</mat-icon>\n    </button>\n  </div>\n  <div mat-dialog-content>\n    <form class=\"register-form m-4\" [formGroup]=\"proForm\" (ngSubmit)=\"submit\">\n      <div class=\"row\">\n        <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\">\n          <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n            <mat-label>S.NO</mat-label>\n            <input matInput formControlName=\"sno\" required>\n            <mat-icon matSuffix>note</mat-icon>\n            <mat-error *ngIf=\"proForm.get('sno').hasError('required')\">\n              sno is required\n            </mat-error>\n          </mat-form-field>\n        </div>\n        <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\">\n          <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n            <mat-label>Date</mat-label>\n            <input matInput [matDatepicker]=\"picker\" formControlName=\"date\">\n            <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n            <mat-datepicker #picker></mat-datepicker>\n            <mat-error *ngIf=\"proForm.get('date').hasError('required')\">\n              Please select date\n            </mat-error>\n          </mat-form-field>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\">\n          <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n            <mat-label>Account Name</mat-label>\n            <input matInput formControlName=\"accountName\" required>\n            <mat-icon matSuffix>face</mat-icon>\n            <mat-error *ngIf=\"proForm.get('accountName').hasError('required')\">\n              Account Name is required\n            </mat-error>\n          </mat-form-field>\n        </div>\n        <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\">\n          <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n            <mat-label>Trading Client</mat-label>\n            <input matInput formControlName=\"tradingClient\" required>\n            <mat-icon matSuffix>face</mat-icon>\n            <mat-error *ngIf=\"proForm.get('tradingClient').hasError('required')\">\n              Trading Client is required\n            </mat-error>\n          </mat-form-field>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\">\n          <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n            <mat-label>amount</mat-label>\n            <input matInput formControlName=\"amount\" type=\"number\">\n            <mat-icon matSuffix>money</mat-icon>\n            <mat-error *ngIf=\"proForm.get('amount').hasError('required')\">\n              amount is required\n            </mat-error>\n          </mat-form-field>\n        </div>\n        <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\">\n          <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n            <mat-label>status</mat-label>\n            <mat-select formControlName=\"status\" required>\n              <mat-option [value]=\"'Active'\">\n                Active\n              </mat-option>\n              <mat-option [value]=\"'Disabled'\">\n                Disabled\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"proForm.get('status').hasError('required')\">\n              Status is required\n            </mat-error>\n          </mat-form-field>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\n          <div class=\"example-button-row\">\n            <button mat-raised-button color=\"primary\" [type]=\"submit\" [disabled]=\"!proForm.valid\" [mat-dialog-close]=\"1\"\n              (click)=\"confirmAdd()\">Save</button>\n            <button mat-raised-button color=\"warn\" (click)=\"onNoClick()\" tabindex=\"-1\">Cancel</button>\n          </div>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AccountsComponent } from './accounts.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AccountsComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AccountsRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AccountsRoutingModule } from './accounts-routing.module';\nimport { AccountsComponent } from './accounts.component';\n\nimport { PerfectScrollbarModule } from 'ngx-perfect-scrollbar';\nimport { NgxEchartsModule } from 'ngx-echarts';\nimport { NgApexchartsModule } from 'ng-apexcharts';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MaterialFileInputModule } from 'ngx-material-file-input';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { DeleteDialogComponent } from './dialogs/delete/delete.component';\nimport { FormDialogComponent } from './dialogs/form-dialog/form-dialog.component';\n\nimport { TeachersService } from './teachers.service';\n\n\n@NgModule({\n  declarations: [AccountsComponent, DeleteDialogComponent, FormDialogComponent],\n  imports: [\n    CommonModule,\n    AccountsRoutingModule,\n    NgxEchartsModule.forRoot({\n      echarts: () => import('echarts'),\n    }),\n    PerfectScrollbarModule,\n    NgApexchartsModule,\n    MatTableModule,\n    MatPaginatorModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSnackBarModule,\n    MatButtonModule,\n    MatIconModule,\n    MatDialogModule,\n    MatSortModule,\n    MatToolbarModule,\n    MatSelectModule,\n    MatDatepickerModule,\n    MatCheckboxModule,\n    MatTabsModule,\n    MaterialFileInputModule,\n    MatMenuModule,\n    MatProgressSpinnerModule,\n  ],\n  providers: [TeachersService],\n})\nexport class AccountsModule { }\n"]}