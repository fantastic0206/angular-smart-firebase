{"version":3,"sources":["webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/select.js"],"names":["_c0","_c1","MatSelect_span_4_Template","rf","ctx","ctx_r2","placeholder","MatSelect_span_5_span_1_Template","ctx_r5","triggerValue","MatSelect_span_5_ng_content_2_Template","MatSelect_span_5_Template","ctx_r3","customTrigger","MatSelect_ng_template_8_Template","_r9","MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener","$event","ctx_r8","_panelDoneAnimatingStream","next","toState","MatSelect_ng_template_8_Template_div_keydown_1_listener","ctx_r10","_handleKeydown","ctx_r4","undefined","_getPanelTheme","_transformOrigin","_triggerFontSize","panelClass","multiple","id","ariaLabel","_getPanelAriaLabelledby","_c2","_c3","matSelectAnimations","transformPanelWrap","optional","transformPanel","transform","minWidth","opacity","getMatSelectDynamicMultipleError","Error","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","nextUniqueId","SELECT_PANEL_MAX_HEIGHT","SELECT_PANEL_PADDING_X","SELECT_PANEL_INDENT_PADDING_X","SELECT_ITEM_HEIGHT_EM","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_VIEWPORT_PADDING","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MatSelectChange","source","value","MatSelectBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","MAT_SELECT_TRIGGER","MatSelectTrigger","ɵfac","MatSelectTrigger_Factory","t","ɵdir","type","selectors","features","useExisting","args","selector","providers","MatSelect","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","defaults","_panelOpen","_required","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_triggerAriaLabelledBy","_destroy","_onChange","_onTouched","_valueId","_offsetY","_positions","originX","originY","overlayX","overlayY","_disableOptionCentering","_focused","controlType","optionSelectionChanges","options","changes","pipe","map","option","onSelectionChange","onStable","openedChange","_openedStream","o","_closedStream","selectionChange","valueChange","valueAccessor","_scrollStrategyFactory","_scrollStrategy","parseInt","disableOptionCentering","typeaheadDebounceInterval","_selectionModel","stateChanges","subscribe","panelOpen","emit","overlayDir","offsetX","markForCheck","change","_triggerRect","trigger","nativeElement","getBoundingClientRect","_initKeyManager","changed","event","added","forEach","select","removed","deselect","_resetOptions","_initializeSelection","newAriaLabelledby","_getTriggerAriaLabelledby","element","setAttribute","removeAttribute","updateErrorState","_keyManager","withTypeAhead","_typeaheadDebounceInterval","complete","close","open","disabled","length","getComputedStyle","fontSize","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayRef","overlayElement","style","_isRtl","fn","isDisabled","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","isOpenKey","manager","isTyping","altKey","preventDefault","previouslySelectedOption","selected","onKeydown","selectedOption","announce","viewValue","activeItem","_selectViaInteraction","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","positionChange","detectChanges","_calculateOverlayOffsetX","panel","scrollTop","color","Promise","resolve","then","_setSelectionByValue","_value","Array","isArray","ngDevMode","clear","currentValue","_selectValue","_sortValues","correspondingOption","updateActiveItem","find","error","console","warn","withVerticalOrientation","withHomeAndEnd","withAllowedModifierKeys","tabOut","focus","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","wasSelected","isSelected","_propagateChanges","setActiveItem","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","empty","setFirstItemActive","activeOptionIndex","labelCount","optionGroups","itemHeight","_getItemHeight","reduce","result","current","index","items","_getItemCount","panelHeight","Math","min","scrollContainerHeight","maxScroll","selectedOptionOffset","_getOptionIndex","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","selectedIndex","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","max","labelId","_getLabelId","ariaLabelledby","_a","getLabelId","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","first","group","leftOverflow","left","rightOverflow","right","width","round","updatePosition","optionHeightAdjustment","height","maxOptionsDisplayed","floor","optionOffsetFromPanelTop","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","ids","_ariaDescribedby","join","_placeholder","newValue","_id","selectedOptions","reverse","isEmpty","MatSelect_Factory","ɵcmp","contentQueries","MatSelect_ContentQueries","dirIndex","_t","viewQuery","MatSelect_Query","hostAttrs","hostVars","hostBindings","MatSelect_HostBindings","MatSelect_keydown_HostBindingHandler","MatSelect_focus_HostBindingHandler","_onFocus","MatSelect_blur_HostBindingHandler","_onBlur","required","toString","errorState","_getAriaActiveDescendant","inputs","disableRipple","compareWith","errorStateMatcher","outputs","exportAs","ngContentSelectors","decls","vars","consts","template","MatSelect_Template","MatSelect_Template_div_click_0_listener","toggle","MatSelect_Template_ng_template_backdropClick_8_listener","MatSelect_Template_ng_template_attach_8_listener","_onAttached","MatSelect_Template_ng_template_detach_8_listener","_r0","directives","styles","encapsulation","data","animation","changeDetection","ctorParameters","decorators","String","propDecorators","descendants","None","OnPush","host","animations","MatSelectModule","ɵmod","ɵinj","factory","MatSelectModule_Factory","imports","ngJitMode","declarations","exports"],"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","file":"default~accounts-accounts-module~apps-apps-module~calendar-calendar-module~contacts-contacts-module~~d26bbcd1-es5.js","sourcesContent":["import { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, ElementRef, Optional, Inject, Self, Attribute, ViewChild, ContentChildren, Input, ContentChild, Output, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, ErrorStateMatcher, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormField, MAT_FORM_FIELD, MatFormFieldModule } from '@angular/material/form-field';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/cdk/overlay';\nimport * as ɵngcc7 from '@angular/common';\nimport * as ɵngcc8 from '@angular/material/form-field';\n\nconst _c0 = [\"trigger\"];\nconst _c1 = [\"panel\"];\nfunction MatSelect_span_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.placeholder || \"\\u00A0\");\n} }\nfunction MatSelect_span_5_span_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.triggerValue || \"\\u00A0\");\n} }\nfunction MatSelect_span_5_ng_content_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n} }\nfunction MatSelect_span_5_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9);\n    ɵngcc0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 10);\n    ɵngcc0.ɵɵtemplate(2, MatSelect_span_5_ng_content_2_Template, 1, 0, \"ng-content\", 11);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n} }\nfunction MatSelect_ng_template_8_Template(rf, ctx) { if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 12);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 13, 14);\n    ɵngcc0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8._panelDoneAnimatingStream.next($event.toState); })(\"keydown\", function MatSelect_ng_template_8_Template_div_keydown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10._handleKeydown($event); });\n    ɵngcc0.ɵɵprojection(3, 1);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@transformPanelWrap\", undefined);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\n    ɵngcc0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\n    ɵngcc0.ɵɵattribute(\"id\", ctx_r4.id + \"-panel\")(\"aria-multiselectable\", ctx_r4.multiple)(\"aria-label\", ctx_r4.ariaLabel || null)(\"aria-labelledby\", ctx_r4._getPanelAriaLabelledby());\n} }\nconst _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nconst _c3 = [\"mat-select-trigger\", \"*\"];\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true }))\n    ]),\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            transform: 'scaleY(1)'\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            transform: 'scaleY(1)'\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId = 0;\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n/** The max height of the select's overlay panel */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/** The panel's padding on the x-axis */\nconst SELECT_PANEL_PADDING_X = 16;\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/** The height of the select items in `em` units. */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nclass MatSelectBase {\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n}\nMatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) { return new (t || MatSelectTrigger)(); };\nMatSelectTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatSelectTrigger, selectors: [[\"mat-select-trigger\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }])] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSelectTrigger, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-select-trigger',\n                providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }]\n            }]\n    }], null, null); })();\nclass MatSelect extends _MatSelectMixinBase {\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, defaults) {\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this.ngControl = ngControl;\n        this._liveAnnouncer = _liveAnnouncer;\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Whether filling out the select is required in the form. */\n        this._required = false;\n        /** The scroll position of the overlay panel, calculated to center the selected option. */\n        this._scrollTop = 0;\n        /** Whether the component is in multiple selection mode. */\n        this._multiple = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Current `ariar-labelledby` value for the select trigger. */\n        this._triggerAriaLabelledBy = null;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /** The cached font-size of the trigger element. */\n        this._triggerFontSize = 0;\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        this._valueId = `mat-select-value-${nextUniqueId++}`;\n        /** The value of the select panel's transform-origin property. */\n        this._transformOrigin = 'top';\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        /**\n         * This position config ensures that the top \"start\" corner of the overlay\n         * is aligned with with the top \"start\" of the origin by default (overlapping\n         * the trigger completely). If the panel cannot fit below the trigger, it\n         * will fall back to a position above the trigger.\n         */\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n        /** Whether the component is disabling centering of the active option over the trigger. */\n        this._disableOptionCentering = false;\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        /** Aria label of the select. If not specified, the placeholder will be used as label. */\n        this.ariaLabel = '';\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._ngZone.onStable\n                .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        if (defaults) {\n            if (defaults.disableOptionCentering != null) {\n                this.disableOptionCentering = defaults.disableOptionCentering;\n            }\n            if (defaults.typeaheadDebounceInterval != null) {\n                this.typeaheadDebounceInterval = defaults.typeaheadDebounceInterval;\n            }\n        }\n    }\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() { return this._placeholder; }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n    get disableOptionCentering() { return this._disableOptionCentering; }\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() { return this._compareWith; }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() { return this._value; }\n    set value(newValue) {\n        if (newValue !== this._value) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n        }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    get typeaheadDebounceInterval() { return this._typeaheadDebounceInterval; }\n    set typeaheadDebounceInterval(value) {\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n    get id() { return this._id; }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._scrollTop = 0;\n                this.openedChange.emit(true);\n            }\n            else {\n                this.openedChange.emit(false);\n                this.overlayDir.offsetX = 0;\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n        this._viewportRuler.change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this._panelOpen) {\n                this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (this.ngControl) {\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n            return;\n        }\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n        this._panelOpen = true;\n        this._keyManager.withHorizontalOrientation(null);\n        this._calculateOverlayPosition();\n        this._highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            if (this._triggerFontSize && this.overlayDir.overlayRef &&\n                this.overlayDir.overlayRef.overlayElement) {\n                this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n            }\n        });\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this.value = value;\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if (!manager.isTyping() && (isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._calculateOverlayOffsetX();\n            this.panel.nativeElement.scrollTop = this._scrollTop;\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            this._selectionModel.clear();\n            value.forEach((currentValue) => this._selectValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            this._selectionModel.clear();\n            const correspondingOption = this._selectValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this._typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withAllowedModifierKeys(['shiftKey']);\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollActiveOptionIntoView();\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected ? this._selectionModel.select(option) :\n                    this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Scrolls the active option into view. */\n    _scrollActiveOptionIntoView() {\n        const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n        const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n        const itemHeight = this._getItemHeight();\n        this.panel.nativeElement.scrollTop = _getOptionScrollPosition((activeOptionIndex + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the index of the provided option in the option list. */\n    _getOptionIndex(option) {\n        return this.options.reduce((result, current, index) => {\n            if (result !== undefined) {\n                return result;\n            }\n            return option === current ? index : undefined;\n        }, undefined);\n    }\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    _calculateOverlayPosition() {\n        const itemHeight = this._getItemHeight();\n        const items = this._getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset = this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0]);\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        const halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._getLabelId();\n        return this.ariaLabelledby ? labelId + ' ' + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the ID of the element that is labelling the select. */\n    _getLabelId() {\n        var _a;\n        return ((_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId()) || '';\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    _calculateOverlayOffsetX() {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this._isRtl();\n        const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n            SELECT_PANEL_PADDING_X * 2;\n        let offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else {\n            let selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        let optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this._disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            let partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    _checkOverlayWithinViewport(maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        const panelHeightTop = Math.abs(this._offsetY);\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n            return;\n        }\n    }\n    /** Sets the transform origin point based on the selected option. */\n    _getOriginBasedOnOption() {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return `50% ${originY}px 0px`;\n    }\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n    }\n    /** Calculates the height of the select's options. */\n    _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        let value = this._getLabelId() + ' ' + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty;\n    }\n}\nMatSelect.ɵfac = function MatSelect_Factory(t) { return new (t || MatSelect)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgControl, 10), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_CONFIG, 8)); };\nMatSelect.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSelect, selectors: [[\"mat-select\"]], contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_SELECT_TRIGGER, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    } }, viewQuery: function MatSelect_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n        ɵngcc0.ɵɵviewQuery(_c1, true);\n        ɵngcc0.ɵɵviewQuery(CdkConnectedOverlay, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.overlayDir = _t.first);\n    } }, hostAttrs: [\"role\", \"combobox\", \"aria-autocomplete\", \"none\", \"aria-haspopup\", \"true\", 1, \"mat-select\"], hostVars: 20, hostBindings: function MatSelect_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatSelect_focus_HostBindingHandler() { return ctx._onFocus(); })(\"blur\", function MatSelect_blur_HostBindingHandler() { return ctx._onBlur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-controls\", ctx.panelOpen ? ctx.id + \"-panel\" : null)(\"aria-expanded\", ctx.panelOpen)(\"aria-label\", ctx.ariaLabel || null)(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n        ɵngcc0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required)(\"mat-select-empty\", ctx.empty)(\"mat-select-multiple\", ctx.multiple);\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", ariaLabel: [\"aria-label\", \"ariaLabel\"], id: \"id\", disableOptionCentering: \"disableOptionCentering\", typeaheadDebounceInterval: \"typeaheadDebounceInterval\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", compareWith: \"compareWith\", value: \"value\", panelClass: \"panelClass\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", sortComparator: \"sortComparator\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, exportAs: [\"matSelect\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MatFormFieldControl, useExisting: MatSelect },\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c3, decls: 9, vars: 10, consts: [[\"cdk-overlay-origin\", \"\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-select-panel-wrap\"], [\"role\", \"listbox\", \"tabindex\", \"-1\", 3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]], template: function MatSelect_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() { return ctx.toggle(); });\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\n        ɵngcc0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n        ɵngcc0.ɵɵelement(7, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(8, MatSelect_ng_template_8_Template, 4, 14, \"ng-template\", 7);\n        ɵngcc0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_8_listener() { return ctx.close(); })(\"attach\", function MatSelect_Template_ng_template_attach_8_listener() { return ctx._onAttached(); })(\"detach\", function MatSelect_Template_ng_template_detach_8_listener() { return ctx.close(); });\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n        ɵngcc0.ɵɵattribute(\"id\", ctx._valueId);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._triggerRect == null ? null : ctx._triggerRect.width)(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\n    } }, directives: [ɵngcc6.CdkOverlayOrigin, ɵngcc7.NgSwitch, ɵngcc7.NgSwitchCase, ɵngcc6.CdkConnectedOverlay, ɵngcc7.NgSwitchDefault, ɵngcc7.NgClass], styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\\n\"], encapsulation: 2, data: { animation: [\n            matSelectAnimations.transformPanelWrap,\n            matSelectAnimations.transformPanel\n        ] }, changeDetection: 0 });\nMatSelect.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: ErrorStateMatcher },\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }] },\n    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SELECT_SCROLL_STRATEGY,] }] },\n    { type: LiveAnnouncer },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_SELECT_CONFIG,] }] }\n];\nMatSelect.propDecorators = {\n    trigger: [{ type: ViewChild, args: ['trigger',] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    overlayDir: [{ type: ViewChild, args: [CdkConnectedOverlay,] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MAT_OPTGROUP, { descendants: true },] }],\n    panelClass: [{ type: Input }],\n    customTrigger: [{ type: ContentChild, args: [MAT_SELECT_TRIGGER,] }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    multiple: [{ type: Input }],\n    disableOptionCentering: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    errorStateMatcher: [{ type: Input }],\n    typeaheadDebounceInterval: [{ type: Input }],\n    sortComparator: [{ type: Input }],\n    id: [{ type: Input }],\n    openedChange: [{ type: Output }],\n    _openedStream: [{ type: Output, args: ['opened',] }],\n    _closedStream: [{ type: Output, args: ['closed',] }],\n    selectionChange: [{ type: Output }],\n    valueChange: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSelect, [{\n        type: Component,\n        args: [{\n                selector: 'mat-select',\n                exportAs: 'matSelect',\n                template: \"<div cdk-overlay-origin\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder\\\" *ngSwitchCase=\\\"true\\\">{{placeholder || '\\\\u00A0'}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span *ngSwitchDefault>{{triggerValue || '\\\\u00A0'}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n                inputs: ['disabled', 'disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'role': 'combobox',\n                    'aria-autocomplete': 'none',\n                    // TODO(crisbeto): the value for aria-haspopup should be `listbox`, but currently it's difficult\n                    // to sync into g3, because of an outdated automated a11y check which flags it as an invalid\n                    // value. At some point we should try to switch it back to being `listbox`. When doing the\n                    // MDC-based `mat-select`, we can get away with starting it off as `listbox`.\n                    'aria-haspopup': 'true',\n                    'class': 'mat-select',\n                    '[attr.id]': 'id',\n                    '[attr.tabindex]': 'tabIndex',\n                    '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                    '[attr.aria-expanded]': 'panelOpen',\n                    '[attr.aria-label]': 'ariaLabel || null',\n                    '[attr.aria-required]': 'required.toString()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                    '[class.mat-select-disabled]': 'disabled',\n                    '[class.mat-select-invalid]': 'errorState',\n                    '[class.mat-select-required]': 'required',\n                    '[class.mat-select-empty]': 'empty',\n                    '[class.mat-select-multiple]': 'multiple',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()'\n                },\n                animations: [\n                    matSelectAnimations.transformPanelWrap,\n                    matSelectAnimations.transformPanel\n                ],\n                providers: [\n                    { provide: MatFormFieldControl, useExisting: MatSelect },\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n                ],\n                styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.ErrorStateMatcher }, { type: ɵngcc0.ElementRef }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc8.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }] }, { type: ɵngcc4.NgControl, decorators: [{\n                type: Self\n            }, {\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SELECT_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc5.LiveAnnouncer }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_SELECT_CONFIG]\n            }] }]; }, { ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], openedChange: [{\n            type: Output\n        }], _openedStream: [{\n            type: Output,\n            args: ['opened']\n        }], _closedStream: [{\n            type: Output,\n            args: ['closed']\n        }], selectionChange: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], id: [{\n            type: Input\n        }], disableOptionCentering: [{\n            type: Input\n        }], typeaheadDebounceInterval: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], trigger: [{\n            type: ViewChild,\n            args: ['trigger']\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], overlayDir: [{\n            type: ViewChild,\n            args: [CdkConnectedOverlay]\n        }], options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }], optionGroups: [{\n            type: ContentChildren,\n            args: [MAT_OPTGROUP, { descendants: true }]\n        }], panelClass: [{\n            type: Input\n        }], customTrigger: [{\n            type: ContentChild,\n            args: [MAT_SELECT_TRIGGER]\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], errorStateMatcher: [{\n            type: Input\n        }], sortComparator: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSelectModule {\n}\nMatSelectModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSelectModule });\nMatSelectModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSelectModule_Factory(t) { return new (t || MatSelectModule)(); }, providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [[\n            CommonModule,\n            OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n        ], CdkScrollableModule,\n        MatFormFieldModule,\n        MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSelectModule, { declarations: function () { return [MatSelect, MatSelectTrigger]; }, imports: function () { return [CommonModule,\n        OverlayModule,\n        MatOptionModule,\n        MatCommonModule]; }, exports: function () { return [CdkScrollableModule,\n        MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSelectModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    MatFormFieldModule,\n                    MatSelect,\n                    MatSelectTrigger,\n                    MatOptionModule,\n                    MatCommonModule\n                ],\n                declarations: [MatSelect, MatSelectTrigger],\n                providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, SELECT_ITEM_HEIGHT_EM, SELECT_MULTIPLE_PANEL_PADDING_X, SELECT_PANEL_INDENT_PADDING_X, SELECT_PANEL_MAX_HEIGHT, SELECT_PANEL_PADDING_X, SELECT_PANEL_VIEWPORT_PADDING, matSelectAnimations };\n\n//# sourceMappingURL=select.js.map"]}