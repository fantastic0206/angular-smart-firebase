{"version":3,"sources":["webpack:///src/app/contacts/contacts-routing.module.ts","webpack:///src/app/contacts/contacts.module.ts","webpack:///src/app/contacts/contacts.model.ts","webpack:///src/app/contacts/form/form.component.ts","webpack:///src/app/contacts/form/form.component.html","webpack:///src/app/contacts/delete/delete.component.ts","webpack:///src/app/contacts/delete/delete.component.html","webpack:///src/app/contacts/contacts.component.ts","webpack:///src/app/contacts/contacts.component.html","webpack:///src/app/contacts/contacts.service.ts"],"names":["routes","path","component","AdvanceTableRoutingModule","forChild","imports","exports","ContactsModule","declarations","providers","Contacts","contacts","id","getRandomID","img","avatar","name","email","birthDate","Date","address","mobile","note","S4","Math","random","toString","substring","dialogRef","FormComponent","data","contactsService","fb","isDetails","formControl","required","action","dialogTitle","contactsForm","createContactForm","hasError","group","minLength","close","addContacts","getRawValue","selector","templateUrl","styleUrls","DeleteComponent","deleteContacts","confirmDelete","onNoClick","$event","stopPropagation","selection","ContactsComponent","httpClient","dialog","snackBar","filterToggle","displayedColumns","contextMenuPosition","x","y","loadData","open","afterClosed","subscribe","result","exampleDatabase","dataChange","value","unshift","getDialogData","refreshTable","showNotification","row","height","width","console","log","foundIndex","findIndex","splice","paginator","_changePageSize","pageSize","numSelected","selected","length","numRows","dataSource","renderedData","isAllSelected","clear","forEach","select","totalSelect","item","index","d","ExampleDataSource","sort","filter","nativeElement","colorName","text","placementFrom","placementAlign","duration","verticalPosition","horizontalPosition","panelClass","removeSelectedRows","addNew","refresh","contextMenu","_sort","filterChange","filteredData","pageIndex","displayDataChanges","sortChange","page","getAllContactss","pipe","slice","searchStr","toLowerCase","indexOf","sortedData","sortData","startIndex","active","direction","a","b","propertyA","propertyB","valueA","isNaN","valueB","next","ContactsService","API_URL","isTblLoading","dialogData","get","error","message"],"mappings":"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","file":"contacts-contacts-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ContactsComponent } from './contacts.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ContactsComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AdvanceTableRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AdvanceTableRoutingModule } from './contacts-routing.module';\nimport { ContactsComponent } from './contacts.component';\nimport { FormComponent as contactForm } from './form/form.component';\nimport { DeleteComponent } from './delete/delete.component';\n\nimport { MatTableModule } from '@angular/material/table';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MaterialFileInputModule } from 'ngx-material-file-input';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { ContactsService } from './contacts.service';\n\n@NgModule({\n  declarations: [ContactsComponent, contactForm, DeleteComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    AdvanceTableRoutingModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSnackBarModule,\n    MatButtonModule,\n    MatIconModule,\n    MatRadioModule,\n    MatSelectModule,\n    MatCheckboxModule,\n    MatCardModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatSortModule,\n    MatToolbarModule,\n    MaterialFileInputModule,\n    MatMenuModule,\n    MatProgressSpinnerModule,\n  ],\n  providers: [ContactsService],\n})\nexport class ContactsModule {}\n","import { formatDate } from '@angular/common';\r\nexport class Contacts {\r\n  id: number;\r\n  img: string;\r\n  name: string;\r\n  email: string;\r\n  birthDate: string;\r\n  mobile: string;\r\n  address: string;\r\n  note: string;\r\n\r\n  constructor(contacts) {\r\n    {\r\n      this.id = contacts.id || this.getRandomID();\r\n      this.img = contacts.avatar || 'assets/images/user/usrbig1.jpg';\r\n      this.name = contacts.name || '';\r\n      this.email = contacts.email || '';\r\n      this.birthDate = formatDate(new Date(), 'yyyy-MM-dd', 'en') || '';\r\n      this.address = contacts.address || '';\r\n      this.mobile = contacts.mobile || '';\r\n      this.note = contacts.note || '';\r\n    }\r\n  }\r\n  public getRandomID(): string {\r\n    const S4 = () => {\r\n      return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n    };\r\n    return S4() + S4();\r\n  }\r\n}\r\n","import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { Component, Inject } from '@angular/core';\r\nimport { ContactsService } from '../contacts.service';\r\nimport {\r\n  FormControl,\r\n  Validators,\r\n  FormGroup,\r\n  FormBuilder,\r\n} from '@angular/forms';\r\nimport { Contacts } from '../contacts.model';\r\nimport { formatDate } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-form',\r\n  templateUrl: './form.component.html',\r\n  styleUrls: ['./form.component.sass'],\r\n})\r\nexport class FormComponent {\r\n  action: string;\r\n  dialogTitle: string;\r\n  isDetails = false;\r\n  contactsForm: FormGroup;\r\n  contacts: Contacts;\r\n  constructor(\r\n    public dialogRef: MatDialogRef<FormComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    public contactsService: ContactsService,\r\n    private fb: FormBuilder\r\n  ) {\r\n    // Set the defaults\r\n    this.action = data.action;\r\n    if (this.action === 'edit') {\r\n      this.isDetails = false;\r\n      this.dialogTitle = data.contacts.name;\r\n      this.contacts = data.contacts;\r\n      this.contactsForm = this.createContactForm();\r\n    } else if (this.action === 'details') {\r\n      this.contacts = data.contacts;\r\n      this.isDetails = true;\r\n    } else {\r\n      this.isDetails = false;\r\n      this.dialogTitle = 'New Contacts';\r\n      this.contacts = new Contacts({});\r\n      this.contactsForm = this.createContactForm();\r\n    }\r\n  }\r\n  formControl = new FormControl('', [\r\n    Validators.required,\r\n    // Validators.email,\r\n  ]);\r\n  getErrorMessage() {\r\n    return this.formControl.hasError('required')\r\n      ? 'Required field'\r\n      : this.formControl.hasError('email')\r\n      ? 'Not a valid email'\r\n      : '';\r\n  }\r\n  createContactForm(): FormGroup {\r\n    return this.fb.group({\r\n      id: [this.contacts.id],\r\n      img: [this.contacts.img],\r\n      name: [this.contacts.name],\r\n      email: [\r\n        this.contacts.email,\r\n        [Validators.required, Validators.email, Validators.minLength(5)],\r\n      ],\r\n      birthDate: [\r\n        formatDate(this.contacts.birthDate, 'yyyy-MM-dd', 'en'),\r\n        [Validators.required],\r\n      ],\r\n      address: [this.contacts.address],\r\n      mobile: [this.contacts.mobile],\r\n      note: [this.contacts.note],\r\n    });\r\n  }\r\n  submit() {\r\n    // emppty stuff\r\n  }\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n  public confirmAdd(): void {\r\n    this.contactsService.addContacts(this.contactsForm.getRawValue());\r\n  }\r\n}\r\n","<div class=\"addContainer\">\r\n  <div *ngIf=\"!isDetails\" class=\"contact-form\">\r\n    <div class=\"modalHeader\">\r\n      <div class=\"editRowModal\">\r\n        <div class=\"modalHeader clearfix\">\r\n          <img [src]='contacts.img' alt=\"avatar\">\r\n          <div class=\"modal-about\">\r\n            <div class=\"font-weight-bold p-t-5 font-17\">\r\n              {{dialogTitle}}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button mat-icon-button (click)=\"dialogRef.close()\" aria-label=\"Close dialog\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n    <div mat-dialog-content>\r\n      <form class=\"register-form m-4\" [formGroup]=\"contactsForm\" (ngSubmit)=\"submit\">\r\n        <div class=\"row\">\r\n          <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\">\r\n            <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\r\n              <mat-label>Name</mat-label>\r\n              <input matInput formControlName=\"name\" required>\r\n              <i class=\"material-icons-two-tone color-icon\" matSuffix>face</i>\r\n              <mat-error *ngIf=\"contactsForm.get('name').hasError('required')\">\r\n                Name is required\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n          <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\">\r\n            <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\r\n              <mat-label>Email</mat-label>\r\n              <input matInput formControlName=\"email\" required>\r\n              <i class=\"material-icons-two-tone color-icon\" matSuffix>email</i>\r\n              <mat-error *ngIf=\"contactsForm.get('email').hasError('required') || contactsForm.get('email').touched\">\r\n                Please enter a valid email address\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\">\r\n            <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\r\n              <mat-label>Mobile</mat-label>\r\n              <input matInput formControlName=\"mobile\" type=\"number\">\r\n              <i class=\"material-icons-two-tone color-icon\" matSuffix>smartphone</i>\r\n              <mat-error *ngIf=\"contactsForm.get('mobile').hasError('required')\">\r\n                Mobile is required\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n          <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\">\r\n            <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\r\n              <mat-label>Birth date</mat-label>\r\n              <input matInput [matDatepicker]=\"picker\" formControlName=\"birthDate\">\r\n              <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n              <mat-datepicker #picker></mat-datepicker>\r\n              <mat-error *ngIf=\"contactsForm.get('birthDate').hasError('required')\">\r\n                Please select date\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n            <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\r\n              <mat-label>Address</mat-label>\r\n              <textarea matInput formControlName=\"address\"></textarea>\r\n            </mat-form-field>\r\n          </div>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n            <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\r\n              <mat-label>Note</mat-label>\r\n              <textarea matInput formControlName=\"note\"></textarea>\r\n            </mat-form-field>\r\n          </div>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n            <div class=\"example-button-row\">\r\n              <button mat-raised-button color=\"primary\" [type]=\"submit\" [disabled]=\"!contactsForm.valid\"\r\n                [mat-dialog-close]=\"1\" (click)=\"confirmAdd()\">Save</button>\r\n              <button mat-raised-button color=\"warn\" (click)=\"onNoClick()\" tabindex=\"-1\">Cancel</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n  <div *ngIf=\"isDetails\" class=\"contact-details\">\r\n    <div class=\"modalHeader\">\r\n      <div class=\"editRowModal\">\r\n        <div class=\"modalHeader clearfix\">\r\n          <div class=\"modal-about contact-header\">\r\n            <div class=\"contact-details-img\">\r\n              <img [src]='contacts.img' alt=\"avatar\">\r\n            </div>\r\n            <div class=\"contact-details-heading\">\r\n              <div class=\"contact-details-name mb-2\">{{contacts.name}}</div>\r\n              <div class=\"badge col-green\">Friends</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button mat-icon-button (click)=\"dialogRef.close()\" aria-label=\"Close dialog\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n    <div mat-dialog-content>\r\n      <mat-card-content>\r\n        <div class=\"contact-details-field\">\r\n          <i class=\"material-icons-two-tone color-icon\">email</i>\r\n          <div class=\"contact-detail-info\"> {{contacts.email}}\r\n          </div>\r\n        </div>\r\n        <div class=\"contact-details-field\">\r\n          <i class=\"material-icons-two-tone color-icon\">phonelink_ring</i>\r\n          <div class=\"contact-detail-info\"> {{contacts.mobile}}\r\n          </div>\r\n        </div>\r\n        <div class=\"contact-details-field\">\r\n          <i class=\"material-icons-two-tone color-icon\">cake</i>\r\n          <div class=\"contact-detail-info\"> {{contacts.birthDate | date: 'MMMM d, yyyy'}}\r\n          </div>\r\n        </div>\r\n        <div class=\"contact-details-field\">\r\n          <i class=\"material-icons-two-tone color-icon\">location_on</i>\r\n          <div class=\"contact-detail-info\"> {{contacts.address}}\r\n          </div>\r\n        </div>\r\n        <div class=\"contact-details-field\">\r\n          <i class=\"material-icons-two-tone color-icon\">note</i>\r\n          <div class=\"contact-detail-info\"> {{contacts.note}}\r\n          </div>\r\n        </div>\r\n      </mat-card-content>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { Component, Inject } from '@angular/core';\r\nimport { ContactsService } from '../contacts.service';\r\n\r\n@Component({\r\n  selector: 'app-delete',\r\n  templateUrl: './delete.component.html',\r\n  styleUrls: ['./delete.component.sass'],\r\n})\r\nexport class DeleteComponent {\r\n  constructor(\r\n    public dialogRef: MatDialogRef<DeleteComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    public contactsService: ContactsService\r\n  ) {}\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n  confirmDelete(): void {\r\n    this.contactsService.deleteContacts(this.data.id);\r\n  }\r\n}\r\n","<div class=\"container\">\r\n  <h3 mat-dialog-title>Are you sure?</h3>\r\n  <div mat-dialog-content>\r\n    <ul class=\"clearfix\">\r\n      <li>\r\n        <p><span class=\"font-weight-bold\"> Name: </span>{{data.name}}</p>\r\n      </li>\r\n      <li>\r\n        <p><span class=\"font-weight-bold\"> Email: </span>{{ data.email }}</p>\r\n      </li>\r\n      <li>\r\n        <p>\r\n          <span class=\"font-weight-bold\">Mobile: </span>{{data.mobile}}\r\n        </p>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n  <div mat-dialog-actions class=\"mb-1\">\r\n    <button mat-flat-button color=\"warn\" [mat-dialog-close]=\"1\" (click)=\"confirmDelete()\">\r\n      Delete\r\n    </button>\r\n    <button mat-flat-button (click)=\"onNoClick()\" tabindex=\"-1\">Cancel</button>\r\n  </div>\r\n</div>\r\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\r\nimport { ContactsService } from './contacts.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { Contacts } from './contacts.model';\r\nimport { DataSource } from '@angular/cdk/collections';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { BehaviorSubject, fromEvent, merge, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { MatMenuTrigger } from '@angular/material/menu';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport { FormComponent } from './form/form.component';\r\nimport { DeleteComponent } from './delete/delete.component';\r\n\r\n@Component({\r\n  selector: 'app-contacts',\r\n  templateUrl: './contacts.component.html',\r\n  styleUrls: ['./contacts.component.sass'],\r\n})\r\nexport class ContactsComponent implements OnInit {\r\n  filterToggle = false;\r\n  displayedColumns = [\r\n    'select',\r\n    'img',\r\n    'name',\r\n    'email',\r\n    'mobile',\r\n    'birthDate',\r\n    'address',\r\n    'actions',\r\n  ];\r\n  exampleDatabase: ContactsService | null;\r\n  dataSource: ExampleDataSource | null;\r\n  selection = new SelectionModel<Contacts>(true, []);\r\n  id: number;\r\n  contacts: Contacts | null;\r\n  constructor(\r\n    public httpClient: HttpClient,\r\n    public dialog: MatDialog,\r\n    public contactsService: ContactsService,\r\n    private snackBar: MatSnackBar\r\n  ) {}\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\r\n  @ViewChild('filter', { static: true }) filter: ElementRef;\r\n  @ViewChild(MatMenuTrigger)\r\n  contextMenu: MatMenuTrigger;\r\n  contextMenuPosition = { x: '0px', y: '0px' };\r\n\r\n  ngOnInit() {\r\n    this.loadData();\r\n  }\r\n  refresh() {\r\n    this.loadData();\r\n  }\r\n  addNew() {\r\n    const dialogRef = this.dialog.open(FormComponent, {\r\n      data: {\r\n        contacts: this.contacts,\r\n        action: 'add',\r\n      },\r\n    });\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      if (result === 1) {\r\n        // After dialog is closed we're doing frontend updates\r\n        // For add we're just pushing a new row inside DataServicex\r\n        this.exampleDatabase.dataChange.value.unshift(\r\n          this.contactsService.getDialogData()\r\n        );\r\n        this.refreshTable();\r\n        this.showNotification(\r\n          'snackbar-success',\r\n          'Add Record Successfully...!!!',\r\n          'bottom',\r\n          'center'\r\n        );\r\n      }\r\n    });\r\n  }\r\n  detailsCall(row) {\r\n    this.dialog.open(FormComponent, {\r\n      data: {\r\n        contacts: row,\r\n        action: 'details',\r\n      },\r\n      height: '70%',\r\n      width: '35%',\r\n    });\r\n  }\r\n  toggleStar(row) {\r\n    console.log(row);\r\n  }\r\n  editCall(row) {\r\n    this.id = row.id;\r\n    const dialogRef = this.dialog.open(FormComponent, {\r\n      data: {\r\n        contacts: row,\r\n        action: 'edit',\r\n      },\r\n    });\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      if (result === 1) {\r\n        // When using an edit things are little different, firstly we find record inside DataService by id\r\n        const foundIndex = this.exampleDatabase.dataChange.value.findIndex(\r\n          (x) => x.id === this.id\r\n        );\r\n        // Then you update that record using data from dialogData (values you enetered)\r\n        this.exampleDatabase.dataChange.value[\r\n          foundIndex\r\n        ] = this.contactsService.getDialogData();\r\n        // And lastly refresh table\r\n        this.refreshTable();\r\n        this.showNotification(\r\n          'black',\r\n          'Edit Record Successfully...!!!',\r\n          'bottom',\r\n          'center'\r\n        );\r\n      }\r\n    });\r\n  }\r\n  deleteItem(row) {\r\n    this.id = row.id;\r\n    const dialogRef = this.dialog.open(DeleteComponent, {\r\n      data: row,\r\n    });\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      if (result === 1) {\r\n        const foundIndex = this.exampleDatabase.dataChange.value.findIndex(\r\n          (x) => x.id === this.id\r\n        );\r\n        // for delete we use splice in order to remove single object from DataService\r\n        this.exampleDatabase.dataChange.value.splice(foundIndex, 1);\r\n        this.refreshTable();\r\n        this.showNotification(\r\n          'snackbar-danger',\r\n          'Delete Record Successfully...!!!',\r\n          'bottom',\r\n          'center'\r\n        );\r\n      }\r\n    });\r\n  }\r\n  private refreshTable() {\r\n    this.paginator._changePageSize(this.paginator.pageSize);\r\n  }\r\n  /** Whether the number of selected elements matches the total number of rows. */\r\n  isAllSelected() {\r\n    const numSelected = this.selection.selected.length;\r\n    const numRows = this.dataSource.renderedData.length;\r\n    return numSelected === numRows;\r\n  }\r\n\r\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\r\n  masterToggle() {\r\n    this.isAllSelected()\r\n      ? this.selection.clear()\r\n      : this.dataSource.renderedData.forEach((row) =>\r\n          this.selection.select(row)\r\n        );\r\n  }\r\n  removeSelectedRows() {\r\n    const totalSelect = this.selection.selected.length;\r\n    this.selection.selected.forEach((item) => {\r\n      const index: number = this.dataSource.renderedData.findIndex(\r\n        (d) => d === item\r\n      );\r\n      // console.log(this.dataSource.renderedData.findIndex((d) => d === item));\r\n      this.exampleDatabase.dataChange.value.splice(index, 1);\r\n      this.refreshTable();\r\n      this.selection = new SelectionModel<Contacts>(true, []);\r\n    });\r\n    this.showNotification(\r\n      'snackbar-danger',\r\n      totalSelect + ' Record Delete Successfully...!!!',\r\n      'bottom',\r\n      'center'\r\n    );\r\n  }\r\n  public loadData() {\r\n    this.exampleDatabase = new ContactsService(this.httpClient);\r\n    this.dataSource = new ExampleDataSource(\r\n      this.exampleDatabase,\r\n      this.paginator,\r\n      this.sort\r\n    );\r\n    fromEvent(this.filter.nativeElement, 'keyup').subscribe(() => {\r\n      if (!this.dataSource) {\r\n        return;\r\n      }\r\n      this.dataSource.filter = this.filter.nativeElement.value;\r\n    });\r\n  }\r\n  showNotification(colorName, text, placementFrom, placementAlign) {\r\n    this.snackBar.open(text, '', {\r\n      duration: 2000,\r\n      verticalPosition: placementFrom,\r\n      horizontalPosition: placementAlign,\r\n      panelClass: colorName,\r\n    });\r\n  }\r\n}\r\nexport class ExampleDataSource extends DataSource<Contacts> {\r\n  filterChange = new BehaviorSubject('');\r\n  get filter(): string {\r\n    return this.filterChange.value;\r\n  }\r\n  set filter(filter: string) {\r\n    this.filterChange.next(filter);\r\n  }\r\n  filteredData: Contacts[] = [];\r\n  renderedData: Contacts[] = [];\r\n  constructor(\r\n    public exampleDatabase: ContactsService,\r\n    public paginator: MatPaginator,\r\n    public _sort: MatSort\r\n  ) {\r\n    super();\r\n    // Reset to the first page when the user changes the filter.\r\n    this.filterChange.subscribe(() => (this.paginator.pageIndex = 0));\r\n  }\r\n  /** Connect function called by the table to retrieve one stream containing the data to render. */\r\n  connect(): Observable<Contacts[]> {\r\n    // Listen for any changes in the base data, sorting, filtering, or pagination\r\n    const displayDataChanges = [\r\n      this.exampleDatabase.dataChange,\r\n      this._sort.sortChange,\r\n      this.filterChange,\r\n      this.paginator.page,\r\n    ];\r\n    this.exampleDatabase.getAllContactss();\r\n    return merge(...displayDataChanges).pipe(\r\n      map(() => {\r\n        // Filter data\r\n        this.filteredData = this.exampleDatabase.data\r\n          .slice()\r\n          .filter((contacts: Contacts) => {\r\n            const searchStr = (\r\n              contacts.name +\r\n              contacts.birthDate +\r\n              contacts.email +\r\n              contacts.mobile +\r\n              contacts.address\r\n            ).toLowerCase();\r\n            return searchStr.indexOf(this.filter.toLowerCase()) !== -1;\r\n          });\r\n        // Sort filtered data\r\n        const sortedData = this.sortData(this.filteredData.slice());\r\n        // Grab the page's slice of the filtered sorted data.\r\n        const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\r\n        this.renderedData = sortedData.splice(\r\n          startIndex,\r\n          this.paginator.pageSize\r\n        );\r\n        return this.renderedData;\r\n      })\r\n    );\r\n  }\r\n  disconnect() {}\r\n  /** Returns a sorted copy of the database data. */\r\n  sortData(data: Contacts[]): Contacts[] {\r\n    if (!this._sort.active || this._sort.direction === '') {\r\n      return data;\r\n    }\r\n    return data.sort((a, b) => {\r\n      let propertyA: number | string = '';\r\n      let propertyB: number | string = '';\r\n      switch (this._sort.active) {\r\n        case 'id':\r\n          [propertyA, propertyB] = [a.id, b.id];\r\n          break;\r\n        case 'name':\r\n          [propertyA, propertyB] = [a.name, b.name];\r\n          break;\r\n        case 'email':\r\n          [propertyA, propertyB] = [a.email, b.email];\r\n          break;\r\n        case 'birthDate':\r\n          [propertyA, propertyB] = [a.birthDate, b.birthDate];\r\n          break;\r\n        case 'address':\r\n          [propertyA, propertyB] = [a.address, b.address];\r\n          break;\r\n      }\r\n      const valueA = isNaN(+propertyA) ? propertyA : +propertyA;\r\n      const valueB = isNaN(+propertyB) ? propertyB : +propertyB;\r\n      return (\r\n        (valueA < valueB ? -1 : 1) * (this._sort.direction === 'asc' ? 1 : -1)\r\n      );\r\n    });\r\n  }\r\n}\r\n","<section class=\"content\">\r\n  <div class=\"container-fluid\">\r\n    <div class=\"block-header\">\r\n      <div class=\"row\">\r\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n          <ul class=\"breadcrumb breadcrumb-style \">\r\n            <li class=\"breadcrumb-item\">\r\n              <h4 class=\"page-title\">Contacts</h4>\r\n            </li>\r\n            <li class=\"breadcrumb-item bcrumb-1\">\r\n              <a href=\"#\" onClick=\"return false;\">\r\n                <i class=\"fas fa-home\"></i> Home</a>\r\n            </li>\r\n            <li class=\"breadcrumb-item active\">Contacts</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12\">\r\n        <div class=\"tabbable-line\">\r\n          <div class=\"row\">\r\n            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n              <div class=\"card\">\r\n                <div class=\"body\">\r\n                  <div class=\"table-responsive\">\r\n                    <div class=\"materialTableHeader\">\r\n                      <div class=\"row\">\r\n                        <div class=\"col-8\">\r\n                          <ul class=\"header-buttons-left ml-0\">\r\n                            <li class=\"dropdown\">\r\n                              <h2>\r\n                                <strong>Contacts</strong></h2>\r\n                            </li>\r\n                            <li class=\"dropdown m-l-20\">\r\n                              <label for=\"search-input\"><i class=\"material-icons search-icon\">search</i></label>\r\n                              <input placeholder=\"Search\" type=\"text\" #filter class=\"browser-default search-field\"\r\n                                aria-label=\"Search box\">\r\n                            </li>\r\n                            <li>\r\n                              <div class=\"icon-button-demo m-l-10\" [hidden]=!selection.hasValue()>\r\n                                <button mat-mini-fab color=\"warn\" (click)=\"removeSelectedRows()\">\r\n                                  <mat-icon class=\"col-white\">delete\r\n                                  </mat-icon>\r\n                                </button>\r\n                              </div>\r\n                            </li>\r\n                          </ul>\r\n                        </div>\r\n                        <div class=\"col-4\">\r\n                          <ul class=\"header-buttons\">\r\n                            <li>\r\n                              <div class=\"icon-button-demo\">\r\n                                <button mat-mini-fab color=\"primary\" (click)=\"addNew()\">\r\n                                  <mat-icon class=\"col-white\">add</mat-icon>\r\n                                </button>\r\n                              </div>\r\n                            </li>\r\n                            <li>\r\n                              <div class=\"icon-button-demo\">\r\n                                <button mat-mini-fab color=\"primary\" (click)=\"refresh()\">\r\n                                  <mat-icon class=\"col-white\">refresh\r\n                                  </mat-icon>\r\n                                </button>\r\n                              </div>\r\n                            </li>\r\n                          </ul>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <mat-table #table [dataSource]=\"dataSource\" matSort class=\"mat-cell\">\r\n                      <!-- Checkbox Column -->\r\n                      <ng-container matColumnDef=\"select\">\r\n                        <mat-header-cell *matHeaderCellDef [ngClass]=\"'tbl-col-width-per-6'\">\r\n                          <mat-checkbox (change)=\"$event ? masterToggle() : null\"\r\n                            [checked]=\"selection.hasValue() && isAllSelected()\"\r\n                            [indeterminate]=\"selection.hasValue() && !isAllSelected()\" [ngClass]=\"'tbl-checkbox'\">\r\n                          </mat-checkbox>\r\n                        </mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\" [ngClass]=\"'tbl-col-width-per-6'\">\r\n                          <mat-checkbox (click)=\"$event.stopPropagation()\"\r\n                            (change)=\"$event ? selection.toggle(row) : null\" [checked]=\"selection.isSelected(row)\"\r\n                            [ngClass]=\"'tbl-checkbox'\">\r\n                          </mat-checkbox>\r\n                        </mat-cell>\r\n                      </ng-container>\r\n                      <!-- ID Column -->\r\n                      <ng-container matColumnDef=\"id\">\r\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Id\r\n                        </mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\">{{row.id}}</mat-cell>\r\n                      </ng-container>\r\n                      <ng-container matColumnDef=\"img\">\r\n                        <mat-header-cell mat-header-cell *matHeaderCellDef [ngClass]=\"'tbl-col-width-per-6'\"> Image\r\n                        </mat-header-cell>\r\n                        <mat-cell mat-cell *matCellDef=\"let row\" class=\"table-img tbl-col-width-per-6\"> <img\r\n                            [src]=\"row.img\" />\r\n                        </mat-cell>\r\n                      </ng-container>\r\n                      <ng-container matColumnDef=\"name\">\r\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Name\r\n                        </mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\"> {{row.name}}\r\n                        </mat-cell>\r\n                      </ng-container>\r\n                      <ng-container matColumnDef=\"mobile\">\r\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Mobile\r\n                        </mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\"> {{row.mobile}}\r\n                        </mat-cell>\r\n                      </ng-container>\r\n                      <ng-container matColumnDef=\"email\">\r\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Email\r\n                        </mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\"> {{row.email}}\r\n                        </mat-cell>\r\n                      </ng-container>\r\n                      <ng-container matColumnDef=\"birthDate\">\r\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Birth Date\r\n                        </mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\">\r\n                          {{row.birthDate | date: 'MM/dd/yyyy'}}</mat-cell>\r\n                      </ng-container>\r\n                      <ng-container matColumnDef=\"address\">\r\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Address\r\n                        </mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\" class=\"column-nowrap\"> {{row.address}}\r\n                        </mat-cell>\r\n                      </ng-container>\r\n                      <ng-container matColumnDef=\"note\">\r\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Note\r\n                        </mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row\"> {{row.note}}\r\n                        </mat-cell>\r\n                      </ng-container>\r\n                      <!-- actions -->\r\n                      <ng-container matColumnDef=\"actions\">\r\n                        <mat-header-cell class=\"pl-3 tbl-col-width-per-10\" *matHeaderCellDef>Actions\r\n                        </mat-header-cell>\r\n                        <mat-cell *matCellDef=\"let row; let i=index;\" class=\"pl-3 tbl-col-width-per-10\">\r\n                          <button mat-icon-button [matMenuTriggerFor]=\"menu\" (click)=\"$event.stopPropagation()\">\r\n                            <mat-icon>more_vert</mat-icon>\r\n                          </button>\r\n                          <mat-menu #menu=\"matMenu\">\r\n                            <button mat-menu-item (click)=\"editCall(row)\">\r\n                              <i class=\"material-icons-two-tone align-middle mr-2\">create</i>\r\n                              <span>Edit Contact</span>\r\n                            </button>\r\n                            <button mat-menu-item (click)=\"deleteItem(row)\">\r\n                              <i class=\"material-icons-two-tone align-middle mr-2\">delete_forever</i>\r\n                              <span>Delete Contact</span>\r\n                            </button>\r\n                          </mat-menu>\r\n                        </mat-cell>\r\n                      </ng-container>\r\n\r\n                      <mat-header-row *matHeaderRowDef=\"displayedColumns\">\r\n                      </mat-header-row>\r\n                      <mat-row *matRowDef=\"let row; columns: displayedColumns;\" (click)=\"detailsCall(row)\"\r\n                        [style.cursor]=\"'pointer'\" matRipple>\r\n                      </mat-row>\r\n                    </mat-table>\r\n                    <!-- Loading spinner -->\r\n                    <div *ngIf=\"exampleDatabase.isTblLoading\" class=\"tbl-spinner\">\r\n                      <mat-progress-spinner color=\"primary\" [diameter]=\"40\" mode=\"indeterminate\">\r\n                      </mat-progress-spinner>\r\n                    </div>\r\n                    <div *ngIf=\"!exampleDatabase.isTblLoading\" class=\"no-results\"\r\n                      [style.display]=\"dataSource.renderedData.length == 0 ? '' : 'none'\">\r\n                      No results\r\n                    </div>\r\n                    <mat-paginator #paginator [length]=\"dataSource.filteredData.length\" [pageIndex]=\"0\" [pageSize]=\"10\"\r\n                      [pageSizeOptions]=\"[5, 10, 25, 100]\">\r\n                    </mat-paginator>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { Contacts } from './contacts.model';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\n@Injectable()\r\nexport class ContactsService {\r\n  private readonly API_URL = 'assets/data/contacts.json';\r\n  isTblLoading = true;\r\n  dataChange: BehaviorSubject<Contacts[]> = new BehaviorSubject<Contacts[]>([]);\r\n  // Temporarily stores data from dialogs\r\n  dialogData: any;\r\n  constructor(private httpClient: HttpClient) {}\r\n  get data(): Contacts[] {\r\n    return this.dataChange.value;\r\n  }\r\n  getDialogData() {\r\n    return this.dialogData;\r\n  }\r\n  /** CRUD METHODS */\r\n  getAllContactss(): void {\r\n    this.httpClient.get<Contacts[]>(this.API_URL).subscribe(\r\n      (data) => {\r\n        this.isTblLoading = false;\r\n        this.dataChange.next(data);\r\n      },\r\n      (error: HttpErrorResponse) => {\r\n        this.isTblLoading = false;\r\n        console.log(error.name + ' ' + error.message);\r\n      }\r\n    );\r\n  }\r\n  addContacts(contacts: Contacts): void {\r\n    this.dialogData = contacts;\r\n\r\n    /*  this.httpClient.post(this.API_URL, contacts).subscribe(data => {\r\n      this.dialogData = contacts;\r\n      },\r\n      (err: HttpErrorResponse) => {\r\n     // error code here\r\n    });*/\r\n  }\r\n  updateContacts(contacts: Contacts): void {\r\n    this.dialogData = contacts;\r\n\r\n    /* this.httpClient.put(this.API_URL + contacts.id, contacts).subscribe(data => {\r\n      this.dialogData = contacts;\r\n    },\r\n    (err: HttpErrorResponse) => {\r\n      // error code here\r\n    }\r\n  );*/\r\n  }\r\n  deleteContacts(id: number): void {\r\n    console.log(id);\r\n\r\n    /*  this.httpClient.delete(this.API_URL + id).subscribe(data => {\r\n      console.log(id);\r\n      },\r\n      (err: HttpErrorResponse) => {\r\n         // error code here\r\n      }\r\n    );*/\r\n  }\r\n}\r\n"]}