{"version":3,"sources":["webpack:///src/app/usermanagement/usermanagement.component.ts","webpack:///src/app/usermanagement/usermanagement.component.html","webpack:///src/app/usermanagement/teachers.model.ts","webpack:///src/app/usermanagement/teachers.service.ts","webpack:///src/app/usermanagement/usermanagement.module.ts","webpack:///src/app/usermanagement/usermanagement-routing.module.ts","webpack:///src/app/usermanagement/dialogs/form-dialog/form-dialog.component.ts","webpack:///src/app/usermanagement/dialogs/form-dialog/form-dialog.component.html","webpack:///src/app/usermanagement/dialogs/delete/delete.component.ts","webpack:///src/app/usermanagement/dialogs/delete/delete.component.html"],"names":["$event","stopPropagation","selection","UsermanagementComponent","httpClient","dialog","teachersService","snackBar","firestore","authService","displayedColumns","contextMenuPosition","x","y","userRole","currentUserValue","loadData","isAdmin","dialogRef","open","data","teachers","action","afterClosed","subscribe","result","exampleDatabase","dataChange","value","unshift","getDialogData","refreshTable","showNotification","row","id","foundIndex","findIndex","splice","paginator","_changePageSize","pageSize","numSelected","selected","length","numRows","dataSource","renderedData","isAllSelected","clear","forEach","select","totalSelect","item","index","d","console","log","ExampleDataSource","sort","filter","nativeElement","colorName","text","placementFrom","placementAlign","duration","verticalPosition","horizontalPosition","panelClass","event","preventDefault","clientX","clientY","removeSelectedRows","selector","templateUrl","styleUrls","_sort","filterChange","filteredData","pageIndex","displayDataChanges","sortChange","page","getAllTeacherss","pipe","slice","searchStr","fullname","username","password","uniqueID","status","role","toLowerCase","indexOf","sortedData","sortData","startIndex","active","direction","a","b","propertyA","propertyB","date","valueA","isNaN","valueB","next","Teachers","getRandomID","Date","email","S4","Math","random","toString","substring","TeachersService","API_URL","isTblLoading","userData","dialogData","collection","get","ss","docs","doc","push","UsermanagementModule","forRoot","echarts","declarations","imports","providers","routes","path","component","UsermanagementRoutingModule","forChild","exports","FormDialogComponent","fb","docId","proForm","formControl","required","dialogTitle","ref","where","createContactForm","hasError","group","close","getRawValue","add","then","res","e","addTeachers","update","confirmAdd","onNoClick","DeleteDialogComponent","deleteTeachers","confirmDelete"],"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","file":"usermanagement-usermanagement-module-es5.js","sourcesContent":["import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { TeachersService } from './teachers.service';\nimport { HttpClient } from '@angular/common/http';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { Teachers } from './teachers.model';\nimport { DataSource } from '@angular/cdk/collections';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { BehaviorSubject, fromEvent, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { FormDialogComponent } from './dialogs/form-dialog/form-dialog.component';\nimport { DeleteDialogComponent } from './dialogs/delete/delete.component';\n// import { MatMenuTrigger } from '@angular/material/menu';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { AngularFirestore } from \"@angular/fire/firestore\";\nimport { AuthService } from 'src/app/core/service/auth.service';\n\n@Component({\n  selector: 'app-usermanagement',\n  templateUrl: './usermanagement.component.html',\n  styleUrls: ['./usermanagement.component.sass']\n})\nexport class UsermanagementComponent implements OnInit {\n    displayedColumns = [\n      'select',\n      'date',\n      'fullname',\n      'username',\n      'password',\n      'uniqueID',\n      'status',\n      'role',\n      'actions',\n    ];\n    exampleDatabase: TeachersService | null;\n    dataSource: ExampleDataSource | null;\n    selection = new SelectionModel<Teachers>(true, []);\n    id: number;\n    teachers: Teachers | null;\n\n  constructor(\n    // private fb: FormBuilder,\n    public httpClient: HttpClient,\n    public dialog: MatDialog,\n    public teachersService: TeachersService,\n    private snackBar: MatSnackBar,\n    public firestore: AngularFirestore,\n    public authService: AuthService\n  ) { }\n\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n  @ViewChild('filter', { static: true }) filter: ElementRef;\n  // @ViewChild(MatMenuTrigger)\n  // contextMenu: MatMenuTrigger;\n  contextMenuPosition = { x: '0px', y: '0px' };\n\n  userRole = this.authService.currentUserValue['role'];\n\n  isAdmin(): boolean {\n    if(this.userRole == 'Admin') {\n      return true ;\n    }\n  }\n\n  onSubmit() {\n    // console.log('Form Value', this.proForm.value);\n  }\n\n  ngOnInit(): void {\n    this.loadData();\n    this.isAdmin();\n  }\n  addNew() {\n    const dialogRef = this.dialog.open(FormDialogComponent, {\n      data: {\n        teachers: this.teachers,\n        action: 'add',\n      },\n    });\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result === 1) {\n        // After dialog is closed we're doing frontend updates\n        // For add we're just pushing a new row inside DataServicex\n        this.exampleDatabase.dataChange.value.unshift(\n          this.teachersService.getDialogData()\n        );\n        this.refreshTable();\n        this.showNotification(\n          'snackbar-success',\n          'Add Record Successfully...!!!',\n          'bottom',\n          'center'\n        );\n      }\n    });\n  }\n  editCall(row) {\n    this.id = row.id;\n    const dialogRef = this.dialog.open(FormDialogComponent, {\n      data: {\n        teachers: row,\n        action: 'edit',\n      },\n    });\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result === 1) {\n        // When using an edit things are little different, firstly we find record inside DataService by id\n        const foundIndex = this.exampleDatabase.dataChange.value.findIndex(\n          (x) => x.id === this.id\n        );\n        // Then you update that record using data from dialogData (values you enetered)\n        this.exampleDatabase.dataChange.value[\n          foundIndex\n        ] = this.teachersService.getDialogData();\n        // And lastly refresh table\n        this.refreshTable();\n        this.showNotification(\n          'black',\n          'Edit Record Successfully...!!!',\n          'bottom',\n          'center'\n        );\n      }\n    });\n  }\n  deleteItem(row) {\n    this.id = row.id;\n    const dialogRef = this.dialog.open(DeleteDialogComponent, {\n      data: row,\n    });\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result === 1) {\n        const foundIndex = this.exampleDatabase.dataChange.value.findIndex(\n          (x) => x.id === this.id\n        );\n        // for delete we use splice in order to remove single object from DataService\n        this.exampleDatabase.dataChange.value.splice(foundIndex, 1);\n        this.refreshTable();\n        this.showNotification(\n          'snackbar-danger',\n          'Delete Record Successfully...!!!',\n          'bottom',\n          'center'\n        );\n      }\n    });\n  }\n  private refreshTable() {\n    this.paginator._changePageSize(this.paginator.pageSize);\n  }\n  /** Whether the number of selected elements matches the total number of rows. */\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.renderedData.length;\n    return numSelected === numRows;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  masterToggle() {\n    this.isAllSelected()\n      ? this.selection.clear()\n      : this.dataSource.renderedData.forEach((row) =>\n          this.selection.select(row)\n        );\n  }\n  removeSelectedRows() {\n    const totalSelect = this.selection.selected.length;\n    this.selection.selected.forEach((item) => {\n      const index: number = this.dataSource.renderedData.findIndex(\n        (d) => d === item\n      );\n      // console.log(this.dataSource.renderedData.findIndex((d) => d === item));\n      this.exampleDatabase.dataChange.value.splice(index, 1);\n      this.refreshTable();\n      this.selection = new SelectionModel<Teachers>(true, []);\n    });\n    this.showNotification(\n      'snackbar-danger',\n      totalSelect + ' Record Delete Successfully...!!!',\n      'bottom',\n      'center'\n    );\n  }\n  public loadData() {\n    this.exampleDatabase = new TeachersService(this.httpClient, this.firestore);\n    console.log(\"exampleDatabase\", this.exampleDatabase);\n    this.dataSource = new ExampleDataSource(\n      this.exampleDatabase,\n      this.paginator,\n      this.sort\n    );\n    console.log(\"dataSource\", this.dataSource);\n    fromEvent(this.filter.nativeElement, 'keyup').subscribe(() => {\n      if (!this.dataSource) {\n        return;\n      }\n      this.dataSource.filter = this.filter.nativeElement.value;\n    });\n  }\n  showNotification(colorName, text, placementFrom, placementAlign) {\n    this.snackBar.open(text, '', {\n      duration: 2000,\n      verticalPosition: placementFrom,\n      horizontalPosition: placementAlign,\n      panelClass: colorName,\n    });\n  }\n  // context menu\n  onContextMenu(event: MouseEvent, item: Teachers) {\n    event.preventDefault();\n    this.contextMenuPosition.x = event.clientX + 'px';\n    this.contextMenuPosition.y = event.clientY + 'px';\n    // this.contextMenu.menuData = { item: item };\n    // this.contextMenu.menu.focusFirstItem('mouse');\n    // this.contextMenu.openMenu();\n  }\n}\nexport class ExampleDataSource extends DataSource<Teachers> {\n  filterChange = new BehaviorSubject('');\n  get filter(): string {\n    return this.filterChange.value;\n  }\n  set filter(filter: string) {\n    this.filterChange.next(filter);\n  }\n  filteredData: Teachers[] = [];\n  renderedData: Teachers[] = [];\n  constructor(\n    public exampleDatabase: TeachersService,\n    public paginator: MatPaginator,\n    public _sort: MatSort\n  ) {\n    super();\n    // Reset to the first page when the user changes the filter.\n    this.filterChange.subscribe(() => (this.paginator.pageIndex = 0));\n  }\n  /** Connect function called by the table to retrieve one stream containing the data to render. */\n  connect(): Observable<Teachers[]> {\n    // Listen for any changes in the base data, sorting, filtering, or pagination\n    const displayDataChanges = [\n      this.exampleDatabase.dataChange,\n      this._sort.sortChange,\n      this.filterChange,\n      this.paginator.page,\n    ];\n    this.exampleDatabase.getAllTeacherss();\n    return merge(...displayDataChanges).pipe(\n      map(() => {\n        // Filter data\n        this.filteredData = this.exampleDatabase.data\n          .slice()\n          .filter((teachers: Teachers) => {\n            const searchStr = (\n              teachers.fullname +\n              teachers.username +\n              teachers.password +\n              teachers.uniqueID +\n              teachers.status +\n              teachers.role\n            ).toLowerCase();\n            return searchStr.indexOf(this.filter.toLowerCase()) !== -1;\n          });\n        // Sort filtered data\n        const sortedData = this.sortData(this.filteredData.slice());\n        // Grab the page's slice of the filtered sorted data.\n        const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n        this.renderedData = sortedData.splice(\n          startIndex,\n          this.paginator.pageSize\n        );\n        return this.renderedData;\n      })\n    );\n  }\n  disconnect() {}\n  /** Returns a sorted copy of the database data. */\n  sortData(data: Teachers[]): Teachers[] {\n    if (!this._sort.active || this._sort.direction === '') {\n      return data;\n    }\n    return data.sort((a, b) => {\n      let propertyA: number | string = '';\n      let propertyB: number | string = '';\n      switch (this._sort.active) {\n        case 'id':\n          [propertyA, propertyB] = [a.id, b.id];\n          break;\n        case 'date':\n          [propertyA, propertyB] = [a.date, b.date];\n          break;\n        case 'fullname':\n          [propertyA, propertyB] = [a.fullname, b.fullname];\n          break;\n        case 'username':\n          [propertyA, propertyB] = [a.username, b.username];\n          break;\n        case 'password':\n          [propertyA, propertyB] = [a.password, b.password];\n          break;\n        case 'uniqueID':\n          [propertyA, propertyB] = [a.uniqueID, b.uniqueID];\n          break;\n        case 'status':\n          [propertyA, propertyB] = [a.status, b.status];\n          break;\n        case 'role':\n          [propertyA, propertyB] = [a.role, b.role];\n          break;\n      }\n      const valueA = isNaN(+propertyA) ? propertyA : +propertyA;\n      const valueB = isNaN(+propertyB) ? propertyB : +propertyB;\n      return (\n        (valueA < valueB ? -1 : 1) * (this._sort.direction === 'asc' ? 1 : -1)\n      );\n    });\n  }\n}\n\n","<section class=\"content\" style=\"margin-top: 10px\">\n  <div class=\"container-fluid\">\n    <div class=\"block-header\">\n      <div class=\"row\">\n        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n          <ul class=\"breadcrumb breadcrumb-style \">\n            <li class=\"breadcrumb-item\">\n              <h4 class=\"page-title\">User Management</h4>\n            </li>\n            <li class=\"breadcrumb-item bcrumb-1\">\n              <a routerLink=\"/admin/dashboard/main\">\n                <i class=\"fas fa-home\"></i></a>\n            </li>\n            <a class=\"active\" style=\"color: #444444; padding: 3px 0;\">User Management</a>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n      <div class=\"card\">\n        <div class=\"body\">\n          <div class=\"table-responsive\">\n            <div class=\"materialTableHeader\">\n              <div class=\"row\">\n                <div class=\"col-8\">\n                  <ul class=\"header-buttons-left ml-0\">\n                    <!-- <li class=\"dropdown\">\n                      <h2>\n                        <strong>Teachers</strong></h2>\n                    </li> -->\n                    <li class=\"dropdown m-l-20\">\n                      <label for=\"search-input\"><i class=\"material-icons search-icon\">search</i></label>\n                      <input placeholder=\"Search\" type=\"text\" #filter class=\"browser-default search-field\"\n                        aria-label=\"Search box\">\n                    </li>\n                    <li>\n                      <div class=\"icon-button-demo m-l-10\" [hidden]=!selection.hasValue()>\n                        <button mat-mini-fab color=\"warn\" (click)=\"removeSelectedRows()\">\n                          <mat-icon class=\"col-white\">delete\n                          </mat-icon>\n                        </button>\n                      </div>\n                    </li>\n                  </ul>\n                </div>\n                <div class=\"col-4\">\n                  <ul class=\"header-buttons\">\n                    <li *ngIf=\"isAdmin()\">\n                      <div class=\"icon-button-demo\">\n                        <button mat-raised-button color=\"primary\" (click)=\"addNew()\">\n                          <mat-icon class=\"col-white\" style=\"font-size: 16px; padding: 3px;\">add</mat-icon>Add\n                        </button>\n                      </div>\n                    </li>\n                    <!-- <li>\n                      <div class=\"icon-button-demo\">\n                        <button mat-mini-fab color=\"primary\">\n                          <mat-icon class=\"col-white\">refresh\n                          </mat-icon>\n                        </button>\n                      </div>\n                    </li> -->\n                  </ul>\n                </div>\n              </div>\n            </div>\n            <mat-table #table [dataSource]=\"dataSource\" matSort class=\"mat-cell\">\n              <!-- Checkbox Column -->\n              <ng-container matColumnDef=\"select\">\n                <mat-header-cell *matHeaderCellDef [ngClass]=\"'tbl-col-width-per-6'\">\n                  <mat-checkbox (change)=\"$event ? masterToggle() : null\"\n                    [checked]=\"selection.hasValue() && isAllSelected()\"\n                    [indeterminate]=\"selection.hasValue() && !isAllSelected()\" [ngClass]=\"'tbl-checkbox'\">\n                  </mat-checkbox>\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let row\" [ngClass]=\"'tbl-col-width-per-6'\">\n                  <mat-checkbox (click)=\"$event.stopPropagation()\"\n                    (change)=\"$event ? selection.toggle(row) : null\" [checked]=\"selection.isSelected(row)\"\n                    [ngClass]=\"'tbl-checkbox'\">\n                  </mat-checkbox>\n                </mat-cell>\n              </ng-container>\n              <!-- ID Column -->\n              <ng-container matColumnDef=\"id\">\n                <mat-header-cell *matHeaderCellDef mat-sort-header>Id\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let row\">{{row.id}}</mat-cell>\n              </ng-container>\n              <ng-container matColumnDef=\"date\">\n                <mat-header-cell mat-header-cell *matHeaderCellDef> Date\n                </mat-header-cell>\n                <mat-cell mat-cell *matCellDef=\"let row\" (contextmenu)=\"onContextMenu($event, row)\"\n                class=\"table-img\"> {{row.date | date: 'yyyy-MM-dd'}}\n                </mat-cell>\n              </ng-container>\n              <ng-container matColumnDef=\"fullname\">\n                <mat-header-cell *matHeaderCellDef mat-sort-header>Client Name\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let row\" (contextmenu)=\"onContextMenu($event, row)\"> {{row.fullname}}\n                </mat-cell>\n              </ng-container>\n              <ng-container matColumnDef=\"username\">\n                <mat-header-cell *matHeaderCellDef mat-sort-header>User Name\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let row\" (contextmenu)=\"onContextMenu($event, row)\">\n                  {{row.username}}</mat-cell>\n              </ng-container>\n              <ng-container matColumnDef=\"password\">\n                <mat-header-cell *matHeaderCellDef mat-sort-header>Password\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let row\" (contextmenu)=\"onContextMenu($event, row)\"> {{row.password}}\n                </mat-cell>\n              </ng-container>\n              <ng-container matColumnDef=\"uniqueID\">\n                <mat-header-cell *matHeaderCellDef mat-sort-header>UniqueID\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let row\" (contextmenu)=\"onContextMenu($event, row)\"> {{row.uniqueID}}\n                </mat-cell>\n              </ng-container>\n              <ng-container matColumnDef=\"status\">\n                <mat-header-cell *matHeaderCellDef mat-sort-header>Status\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let row\" (contextmenu)=\"onContextMenu($event, row)\"> {{row.status}}\n                </mat-cell>\n              </ng-container>\n              <ng-container matColumnDef=\"role\">\n                <mat-header-cell *matHeaderCellDef mat-sort-header>Role\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let row\" (contextmenu)=\"onContextMenu($event, row)\"> {{row.role}}\n                </mat-cell>\n              </ng-container>\n              <!-- actions -->\n              <ng-container matColumnDef=\"actions\">\n                <mat-header-cell class=\"pr-0\" *matHeaderCellDef><a *ngIf=\"isAdmin()\">Actions</a>\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let row; let i=index;\" class=\"pr-0\">\n                  <button *ngIf=\"isAdmin()\" mat-icon-button color=\"accent\" class=\"btn-tbl-edit\" (click)=\"$event.stopPropagation()\"\n                    (click)=\"editCall(row)\">\n                    <mat-icon aria-label=\"Edit\" class=\"col-white\">edit</mat-icon>\n                  </button>\n                  <button *ngIf=\"isAdmin()\" mat-icon-button color=\"accent\" class=\"btn-tbl-delete\" (click)=\"$event.stopPropagation()\"\n                    (click)=\"deleteItem(row)\">\n                    <mat-icon aria-label=\"Delete\" class=\"col-white\">delete</mat-icon>\n                  </button>\n                </mat-cell>\n              </ng-container>\n              <mat-header-row *matHeaderRowDef=\"displayedColumns\">\n              </mat-header-row>\n              <!-- <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row> -->\n              <mat-row *matRowDef=\"let row; columns: displayedColumns;\"\n                [style.cursor]=\"'pointer'\" matRipple>\n              </mat-row>\n            </mat-table>\n            <!-- Loading spinner -->\n            <div *ngIf=\"exampleDatabase.isTblLoading\" class=\"tbl-spinner\">\n              <mat-progress-spinner color=\"primary\" [diameter]=\"40\" mode=\"indeterminate\">\n              </mat-progress-spinner>\n            </div>\n            <!-- context menu start -->\n            <div style=\"visibility: hidden; position: fixed\" [style.left]=\"contextMenuPosition.x\"\n              [style.top]=\"contextMenuPosition.y\" [matMenuTriggerFor]=\"contextMenu\">\n            </div>\n            <mat-menu #contextMenu=\"matMenu\">\n              <ng-template matMenuContent let-item=\"item\">\n                <button mat-menu-item (click)=\"addNew()\">\n                  <mat-icon>add_box</mat-icon>\n                  <span>Add Record</span>\n                </button>\n                <button mat-menu-item (click)=\"editCall(item)\">\n                  <mat-icon>create</mat-icon>\n                  <span>Edit Record</span>\n                </button>\n                <button mat-menu-item (click)=\"deleteItem(item)\">\n                  <mat-icon>delete</mat-icon>\n                  <span>Delete Record</span>\n                </button>\n                <button mat-menu-item (click)=\"refresh()\">\n                  <mat-icon>refresh</mat-icon>\n                  <span>Refresh Record</span>\n                </button>\n                <button mat-menu-item disabled>\n                  <mat-icon>no_encryption</mat-icon>\n                  <span>Disable</span>\n                </button>\n                <button mat-menu-item [matMenuTriggerFor]=\"nestedmenu\">\n                  <mat-icon>list_alt</mat-icon>\n                  <span> Nested Menu</span>\n                </button>\n              </ng-template>\n            </mat-menu>\n            <mat-menu #nestedmenu=\"matMenu\">\n              <button mat-menu-item>\n                <mat-icon>mail_outline</mat-icon>\n                <span>Item 1</span>\n              </button>\n              <button mat-menu-item>\n                <mat-icon>call</mat-icon>\n                <span>Item 2</span>\n              </button>\n              <button mat-menu-item>\n                <mat-icon>chat</mat-icon>\n                <span>Item 3</span>\n              </button>\n            </mat-menu>\n            <!-- context menu end -->\n            <div *ngIf=\"!exampleDatabase.isTblLoading\" class=\"no-results\"\n              [style.display]=\"dataSource.renderedData.length == 0 ? '' : 'none'\">\n              No results\n            </div>\n            <mat-paginator #paginator [length]=\"dataSource.filteredData.length\" [pageIndex]=\"0\"\n              [pageSize]=\"10\" [pageSizeOptions]=\"[5, 10, 25, 100]\">\n            </mat-paginator>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n","import { formatDate } from '@angular/common';\r\nexport class Teachers {\r\n  id: number;\r\n  fullname: string;\r\n  username: string;\r\n  password: string;\r\n  uniqueID: string;\r\n  status: string;\r\n  role: string;\r\n  date: string;\r\n  email: string;\r\n  constructor(teachers) {\r\n    {\r\n      this.id = teachers.id || this.getRandomID();\r\n      // this.date = teachers.date || formatDate(new Date(), 'yyyy-MM-dd', 'en');\r\n      this.date = formatDate(teachers.date ? teachers.date : new Date(), \"yyyy-MM-dd\", \"en\") || formatDate(new Date(), 'yyyy-MM-dd', 'en');\r\n      this.fullname = teachers.fullname || '';\r\n      this.username = teachers.username || '';\r\n      this.password = teachers.password || '';\r\n      this.uniqueID = teachers.uniqueID || this.getRandomID();\r\n      this.status = teachers.status || '';\r\n      this.role = teachers.role || '';\r\n      this.email = teachers.email || '';\r\n      // this.date = teachers.date || '';\r\n    }\r\n  }\r\n  public getRandomID(): string {\r\n    const S4 = () => {\r\n      return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n    };\r\n    return S4() + S4();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { Teachers } from './teachers.model';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { AngularFirestore } from \"@angular/fire/firestore\";\r\n@Injectable()\r\nexport class TeachersService {\r\n  private readonly API_URL = 'assets/data/usermanagement.json';\r\n  isTblLoading = true;\r\n  dataChange: BehaviorSubject<Teachers[]> = new BehaviorSubject<Teachers[]>([]);\r\n  // Temporarily stores data from dialogs\r\n  dialogData: any;\r\n  userData: any[] = [];\r\n  constructor(private httpClient: HttpClient, private firestore: AngularFirestore) {}\r\n  get data(): Teachers[] {\r\n    return this.dataChange.value;\r\n  }\r\n  getDialogData() {\r\n    return this.dialogData;\r\n  }\r\n  /** CRUD METHODS */\r\n  getAllTeacherss(): void {\r\n    this.firestore\r\n    .collection(\"userManagement\")\r\n    .get()\r\n    .subscribe((ss) => {\r\n      ss.docs.forEach((doc) => {\r\n        this.userData.push(doc.data());\r\n        console.log(this.userData);\r\n        this.isTblLoading = false;\r\n        this.dataChange.next(this.userData);\r\n      });\r\n    });\r\n  }\r\n  addTeachers(teachers: Teachers): void {\r\n    this.dialogData = teachers;\r\n\r\n    /*  this.httpClient.post(this.API_URL, teachers).subscribe(data => {\r\n      this.dialogData = teachers;\r\n      },\r\n      (err: HttpErrorResponse) => {\r\n     // error code here\r\n    });*/\r\n  }\r\n  updateTeachers(teachers: Teachers): void {\r\n    this.dialogData = teachers;\r\n\r\n    /* this.httpClient.put(this.API_URL + teachers.id, teachers).subscribe(data => {\r\n      this.dialogData = teachers;\r\n    },\r\n    (err: HttpErrorResponse) => {\r\n      // error code here\r\n    }\r\n  );*/\r\n  }\r\n  deleteTeachers(id: number): void {\r\n    console.log(id);\r\n\r\n    /*  this.httpClient.delete(this.API_URL + id).subscribe(data => {\r\n      console.log(id);\r\n      },\r\n      (err: HttpErrorResponse) => {\r\n         // error code here\r\n      }\r\n    );*/\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { UsermanagementRoutingModule } from './usermanagement-routing.module';\nimport { UsermanagementComponent } from './usermanagement.component';\n\nimport { PerfectScrollbarModule } from 'ngx-perfect-scrollbar';\nimport { NgxEchartsModule } from 'ngx-echarts';\nimport { NgApexchartsModule } from 'ng-apexcharts';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MaterialFileInputModule } from 'ngx-material-file-input';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { DeleteDialogComponent } from './dialogs/delete/delete.component';\nimport { FormDialogComponent } from './dialogs/form-dialog/form-dialog.component';\n\nimport { TeachersService } from './teachers.service';\n\n\n@NgModule({\n  declarations: [UsermanagementComponent, DeleteDialogComponent, FormDialogComponent],\n  imports: [\n    CommonModule,\n    UsermanagementRoutingModule,\n    NgxEchartsModule.forRoot({\n      echarts: () => import('echarts'),\n    }),\n    NgApexchartsModule,\n    PerfectScrollbarModule,\n    MatTableModule,\n    MatPaginatorModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSnackBarModule,\n    MatButtonModule,\n    MatIconModule,\n    MatDialogModule,\n    MatSortModule,\n    MatToolbarModule,\n    MatSelectModule,\n    MatDatepickerModule,\n    MatCheckboxModule,\n    MatTabsModule,\n    MaterialFileInputModule,\n    MatMenuModule,\n    MatProgressSpinnerModule,\n  ],\n  providers: [TeachersService],\n})\nexport class UsermanagementModule { }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { UsermanagementComponent } from './usermanagement.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: UsermanagementComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class UsermanagementRoutingModule { }\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { TeachersService } from '../../teachers.service';\nimport {\n  FormControl,\n  Validators,\n  FormGroup,\n  FormBuilder,\n} from '@angular/forms';\nimport { Teachers } from '../../teachers.model';\nimport { formatDate } from '@angular/common';\nimport { AngularFirestore } from \"@angular/fire/firestore\";\n\n@Component({\n  selector: 'app-form-dialog',\n  templateUrl: './form-dialog.component.html',\n  styleUrls: ['./form-dialog.component.sass']\n})\nexport class FormDialogComponent implements OnInit {\n  action: string;\n  dialogTitle: string;\n  teachers: Teachers;\n  docId: string = \"\";\n\n  proForm = new FormGroup({\n    date: new FormControl(\"date\"),\n    fullname: new FormControl(\"fullname\"),\n    username: new FormControl(\"username\"),\n    password: new FormControl(\"password\"),\n    status: new FormControl(\"status\"),\n    role: new FormControl(\"role\"),\n    email: new FormControl(\"email\")\n  });\n\n  constructor(\n    public dialogRef: MatDialogRef<FormDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    public teachersService: TeachersService,\n    private fb: FormBuilder,\n    private firestore: AngularFirestore\n  ) {\n    // Set the defaults\n    this.action = data.action;\n    if (this.action === 'edit') {\n      this.dialogTitle = data.teachers.username;\n      this.teachers = data.teachers;\n      this.firestore\n        .collection(\"userManagement\", (ref) =>\n          ref\n            .where(\"fullname\", \"==\", data.teachers.fullname)\n            .where(\"username\", \"==\", data.teachers.username)\n            .where(\"date\", \"==\", data.teachers.date)\n            .where(\"status\", \"==\", data.teachers.status)\n            .where(\"email\", \"==\", data.teachers.email)\n            .where(\"password\", \"==\", data.teachers.password)\n            .where(\"role\", \"==\", data.teachers.role)\n            .where(\"uniqueID\", \"==\", data.teachers.uniqueID)\n            .where(\"id\", \"==\", data.teachers.id)\n        )\n        .get()\n        .subscribe((ss) => {\n          ss.docs.forEach((doc) => {\n            this.docId = doc.id;\n          });\n        });\n    } else {\n      this.dialogTitle = 'New Usermanagement';\n      this.teachers = new Teachers({});\n    }\n    this.proForm = this.createContactForm();\n  }\n  formControl = new FormControl('', [\n    Validators.required,\n    // Validators.email,\n  ]);\n  getErrorMessage() {\n    return this.formControl.hasError('required')\n      ? 'Required field'\n      : this.formControl.hasError('email')\n      ? 'Not a valid email'\n      : '';\n  }\n  createContactForm(): FormGroup {\n    return this.fb.group({\n      id: [this.teachers.id],\n      // email: [\n      //   this.teachers.email,\n      //   [Validators.required, Validators.email, Validators.minLength(5)],\n      // ],\n      // date: [\n      //   formatDate(this.teachers.date, 'yyyy-MM-dd', 'en'),\n      //   [Validators.required],\n      // ],\n      fullname: [this.teachers.fullname],\n      username: [this.teachers.username],\n      password: [this.teachers.password],\n      uniqueID: [this.teachers.uniqueID],\n      status: [this.teachers.status],\n      role: [this.teachers.role],\n      date: [this.teachers.date],\n      email: [this.teachers.email]\n    });\n  }\n  submit() {\n    // emppty stuff\n  }\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n  public confirmAdd(): void {\n    if (this.action === \"add\") {\n      console.log(this.proForm.getRawValue());\n      this.firestore\n        .collection(\"userManagement\")\n        .add({\n          id: this.teachers.id,\n          date: formatDate(this.proForm.value.date, \"yyyy-MM-dd\", \"en\"),\n          fullname: this.proForm.value.fullname,\n          username: this.proForm.value.username,\n          password: this.proForm.value.password,\n          uniqueID: this.teachers.id,\n          status: this.proForm.value.status,\n          role: this.proForm.value.role,\n          email: this.proForm.value.email\n        })\n        .then((res) => {\n          console.log(res);\n        })\n        .catch((e) => {\n          console.log(e);\n        });\n      this.teachersService.addTeachers(this.proForm.getRawValue());\n    } else if (this.action === \"edit\") {\n      this.firestore\n        .collection(\"userManagement\")\n        .doc(this.docId)\n        .update({\n          id: this.teachers.id,\n          date: formatDate(this.proForm.value.date, \"yyyy-MM-dd\", \"en\"),\n          fullname: this.proForm.value.fullname,\n          username: this.proForm.value.username,\n          password: this.proForm.value.password,\n          email: this.proForm.value.email,\n          status: this.proForm.value.status,\n          role: this.proForm.value.role,\n          uniqueID: this.teachers.uniqueID,\n        });\n      this.teachersService.addTeachers(this.proForm.getRawValue());\n    }\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"addContainer\">\n  <div class=\"modalHeader\">\n    <div class=\"editRowModal\">\n      <div class=\"modalHeader clearfix\">\n        <!-- <img [src]='teachers.img' alt=\"avatar\"> -->\n        <div class=\"modal-about\">\n          <div class=\"font-weight-bold p-t-5 font-17\">\n            {{dialogTitle}}</div>\n        </div>\n      </div>\n    </div>\n    <button mat-icon-button (click)=\"dialogRef.close()\" aria-label=\"Close dialog\">\n      <mat-icon>close</mat-icon>\n    </button>\n  </div>\n  <div mat-dialog-content>\n    <form class=\"register-form m-4\" [formGroup]=\"proForm\" (ngSubmit)=\"submit\">\n      <div class=\"row\">\n        <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\">\n          <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n            <mat-label>Date</mat-label>\n            <input matInput [matDatepicker]=\"picker\" formControlName=\"date\">\n            <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n            <mat-datepicker #picker></mat-datepicker>\n            <mat-error *ngIf=\"proForm.get('date').hasError('required')\">\n              Please select date\n            </mat-error>\n          </mat-form-field>\n        </div>\n        <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\">\n          <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n            <mat-label>Client Name</mat-label>\n            <input matInput formControlName=\"fullname\" required>\n            <mat-icon matSuffix>face</mat-icon>\n            <mat-error *ngIf=\"proForm.get('fullname').hasError('required')\">\n              Client Name is required\n            </mat-error>\n          </mat-form-field>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\">\n          <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n            <mat-label>User Name</mat-label>\n            <input matInput formControlName=\"username\" required>\n            <mat-icon matSuffix>face</mat-icon>\n            <mat-error *ngIf=\"proForm.get('username').hasError('required')\">\n              User Name is required\n            </mat-error>\n          </mat-form-field>\n        </div>\n        <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\">\n          <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n            <mat-label>Password</mat-label>\n            <input matInput formControlName=\"password\" required>\n            <mat-icon matSuffix>lock</mat-icon>\n            <mat-error *ngIf=\"proForm.get('password').hasError('required')\">\n              Password is required\n            </mat-error>\n          </mat-form-field>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\">\n          <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n            <mat-label>UniqueID</mat-label>\n            <input matInput formControlName=\"uniqueID\" type=\"number\">\n            <mat-icon matSuffix>money</mat-icon>\n            <mat-error *ngIf=\"proForm.get('uniqueID').hasError('required')\">\n              UniqueID is required\n            </mat-error>\n          </mat-form-field>\n        </div>\n        <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\">\n          <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n            <mat-label>status</mat-label>\n            <mat-select formControlName=\"status\" required>\n              <mat-option [value]=\"'Active'\">\n                Active\n              </mat-option>\n              <mat-option [value]=\"'Disabled'\">\n                Disabled\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"proForm.get('status').hasError('required')\">\n              Status is required\n            </mat-error>\n          </mat-form-field>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\">\n          <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n            <mat-label>Role</mat-label>\n            <mat-select formControlName=\"role\" required>\n              <mat-option [value]=\"'Admin'\">\n                Admin\n              </mat-option>\n              <mat-option [value]=\"'Moderator'\">\n                Moderator\n              </mat-option>\n              <mat-option [value]=\"'User'\">\n                User\n              </mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"proForm.get('role').hasError('required')\">\n              Role is required\n            </mat-error>\n          </mat-form-field>\n        </div>\n        <div class=\"col-xl-6 col-lg-6 col-md-12 col-sm-12 mb-2\">\n          <mat-form-field class=\"example-full-width mb-3\" appearance=\"outline\">\n            <mat-label>Email</mat-label>\n            <input matInput formControlName=\"email\" type=\"email\" required>\n            <mat-icon matSuffix>face</mat-icon>\n            <mat-error *ngIf=\"proForm.get('email').hasError('required')\">\n              Email is required\n            </mat-error>\n          </mat-form-field>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\n          <div class=\"example-button-row\">\n            <button mat-raised-button color=\"primary\" [type]=\"submit\" [disabled]=\"!proForm.valid\" [mat-dialog-close]=\"1\"\n              (click)=\"confirmAdd()\">Save</button>\n            <button mat-raised-button color=\"warn\" (click)=\"onNoClick()\" tabindex=\"-1\">Cancel</button>\n          </div>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { TeachersService } from '../../teachers.service';\nimport { AngularFirestore } from \"@angular/fire/firestore\";\n\n@Component({\n  selector: 'app-delete',\n  templateUrl: './delete.component.html',\n  styleUrls: ['./delete.component.sass']\n})\nexport class DeleteDialogComponent implements OnInit {\n  docId: string = \"\";\n\n  constructor(\n    public dialogRef: MatDialogRef<DeleteDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    public teachersService: TeachersService,\n    private firestore: AngularFirestore\n  ) { }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  confirmDelete(): void {\n    this.firestore.collection('userManagement').doc(this.docId).delete();\n    this.teachersService.deleteTeachers(this.data.id);\n  }\n\n  ngOnInit(): void {\n    console.log(this.data.id);\n    this.firestore\n      .collection(\"userManagement\", (ref) =>\n        ref\n          .where(\"fullname\", \"==\", this.data.fullname)\n          .where(\"username\", \"==\", this.data.username)\n          .where(\"date\", \"==\", this.data.date)\n          .where(\"status\", \"==\", this.data.status)\n          .where(\"email\", \"==\", this.data.email)\n          .where(\"password\", \"==\", this.data.password)\n          .where(\"uniqueID\", \"==\", this.data.uniqueID)\n          .where(\"role\", \"==\", this.data.role)\n      )\n      .get()\n      .subscribe((ss) => {\n        ss.docs.forEach((doc) => {\n          this.docId = doc.id;\n        });\n      });\n  }\n}\n","<div class=\"container\">\n  <h3 mat-dialog-title>Are you sure?</h3>\n  <div mat-dialog-content>\n    <ul class=\"clearfix\">\n      <li>\n        <p><span class=\"font-weight-bold\"> Client Name: </span>{{ data.fullname }}</p>\n      </li>\n      <li>\n        <p><span class=\"font-weight-bold\"> Status: </span>{{ data.status }}</p>\n      </li>\n    </ul>\n  </div>\n  <div mat-dialog-actions class=\"mb-1\">\n    <button mat-flat-button color=\"warn\" [mat-dialog-close]=\"1\" (click)=\"confirmDelete()\">\n      Delete\n    </button>\n    <button mat-flat-button (click)=\"onNoClick()\" tabindex=\"-1\">Cancel</button>\n  </div>\n</div>\n"]}